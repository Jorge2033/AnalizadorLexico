
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ASSIGN BREAK CASE CATCH CLASS COLON COMMA CONST CONTINUE DEFAULT DELETE DIVIDE DIVIDE_ASSIGN DO DOT ELSE EQUAL EXPORT EXTENDS FINALLY FOR FROM FUNCTION GREATER GREATER_EQUAL IF IMPLEMENTS IMPORT IN INPUT INPUT INSTANCEOF LBRACE LBRACKET LESS LESS_EQUAL LET LPAREN MINUS MINUS_ASSIGN MODULO MODULO_ASSIGN MULTIPLY MULTIPLY_ASSIGN NEW NOT NOT_EQUAL NUMBER OR PLUS PLUS_ASSIGN PRINT QUESTION_MARK RBRACE RBRACKET RETURN RPAREN SEMICOLON STRICT_EQUAL STRING SUPER SWITCH THIS THROW TRY TYPEOF VAR VARIABLE VOID WHILEinput : VARIABLE ASSIGN INPUT LPAREN RPARENprogram : statementsstatements : statement\n                  | statement statementsstatement : print\n                | structure_declaration\n                | input \n                | errorprint : PRINT LPAREN arguments RPAREN SEMICOLONarguments : argument\n                 | argument COMMA argumentsargument : STRING\n                | VARIABLEstructure_declaration : CLASS VARIABLE LBRACE statements RBRACE'
    
_lr_action_items = {'VARIABLE':([0,],[2,]),'$end':([1,6,],[0,-1,]),'ASSIGN':([2,],[3,]),'INPUT':([3,],[4,]),'LPAREN':([4,],[5,]),'RPAREN':([5,],[6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'input':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> input","S'",1,None,None,None),
  ('input -> VARIABLE ASSIGN INPUT LPAREN RPAREN','input',5,'p_input','main.py',140),
  ('program -> statements','program',1,'p_program','main.py',147),
  ('statements -> statement','statements',1,'p_statements','main.py',151),
  ('statements -> statement statements','statements',2,'p_statements','main.py',152),
  ('statement -> print','statement',1,'p_statement','main.py',156),
  ('statement -> structure_declaration','statement',1,'p_statement','main.py',157),
  ('statement -> input','statement',1,'p_statement','main.py',158),
  ('statement -> error','statement',1,'p_statement','main.py',159),
  ('print -> PRINT LPAREN arguments RPAREN SEMICOLON','print',5,'p_print','main.py',164),
  ('arguments -> argument','arguments',1,'p_arguments','main.py',168),
  ('arguments -> argument COMMA arguments','arguments',3,'p_arguments','main.py',169),
  ('argument -> STRING','argument',1,'p_argument','main.py',173),
  ('argument -> VARIABLE','argument',1,'p_argument','main.py',174),
  ('structure_declaration -> CLASS VARIABLE LBRACE statements RBRACE','structure_declaration',5,'p_structure_declaration','main.py',178),
]
