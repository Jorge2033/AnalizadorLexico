Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AS
    BREAK
    CASE
    CATCH
    CONTINUE
    DEFAULT
    DELETE
    DIVIDE_ASSIGN
    DO
    ELSE
    EXPORT
    EXTENDS
    FINALLY
    FOR
    FROM
    FUNCTION
    GREATER_EQUAL
    IMPLEMENTS
    IMPORT
    IN
    INSTANCEOF
    LBRACKET
    LESS_EQUAL
    MINUS
    MINUS_ASSIGN
    MODULO
    MODULO_ASSIGN
    MULTIPLY_ASSIGN
    NEW
    NOT
    NOT_EQUAL
    OR
    PLUS_ASSIGN
    PRINT
    QUESTION_MARK
    RBRACKET
    RETURN
    STRICT_EQUAL
    SUPER
    SWITCH
    THIS
    THROW
    TRY
    TYPEOF
    VOID
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     statement -> print
Rule 5     statement -> structure_declaration
Rule 6     statement -> input
Rule 7     statement -> error
Rule 8     statement -> condition
Rule 9     print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON
Rule 10    input -> VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON
Rule 11    input -> VARIABLE ASSIGN INPUT LPAREN RPAREN
Rule 12    expression -> STRING
Rule 13    expression -> VARIABLE
Rule 14    expression -> NUMBER
Rule 15    expression -> expression PLUS expression
Rule 16    term -> term MULTIPLY factor
Rule 17    term -> term DIVIDE factor
Rule 18    term -> factor
Rule 19    factor -> NUMBER
Rule 20    factor -> VARIABLE
Rule 21    typed_variable_declaration -> VARIABLE error
Rule 22    typed_variable_declaration -> VARIABLE VARIABLE error
Rule 23    condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE
Rule 24    condition_operator -> EQUAL
Rule 25    condition_operator -> GREATER
Rule 26    condition_operator -> LESS
Rule 27    typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON
Rule 28    typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON
Rule 29    typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON
Rule 30    typed_variable_declaration -> VAR VARIABLE error
Rule 31    typed_variable_declaration -> LET VARIABLE error
Rule 32    typed_variable_declaration -> CONST VARIABLE error
Rule 33    arguments -> argument
Rule 34    arguments -> argument COMMA arguments
Rule 35    argument -> STRING
Rule 36    argument -> VARIABLE
Rule 37    argument -> NUMBER
Rule 38    structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE
Rule 39    typed_variable_declarations -> typed_variable_declaration
Rule 40    typed_variable_declarations -> typed_variable_declarations typed_variable_declaration

Terminals, with rules where they appear

AND                  : 
AS                   : 
ASSIGN               : 10 11
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 38
COLON                : 27 28 29
COMMA                : 34
CONSOLE              : 9
CONST                : 29 32
CONTINUE             : 
DEFAULT              : 
DELETE               : 
DIVIDE               : 17
DIVIDE_ASSIGN        : 
DO                   : 
DOT                  : 9
ELSE                 : 
EQUAL                : 24
EXPORT               : 
EXTENDS              : 
FINALLY              : 
FOR                  : 
FROM                 : 
FUNCTION             : 
GREATER              : 25
GREATER_EQUAL        : 
IF                   : 23
IMPLEMENTS           : 
IMPORT               : 
IN                   : 
INPUT                : 10 11
INSTANCEOF           : 
LBRACE               : 23 38
LBRACKET             : 
LESS                 : 26
LESS_EQUAL           : 
LET                  : 28 31
LOG                  : 9
LPAREN               : 9 10 11 23
MINUS                : 
MINUS_ASSIGN         : 
MODULO               : 
MODULO_ASSIGN        : 
MULTIPLY             : 16
MULTIPLY_ASSIGN      : 
NEW                  : 
NOT                  : 
NOT_EQUAL            : 
NUMBER               : 14 19 37
OR                   : 
PLUS                 : 15
PLUS_ASSIGN          : 
PRINT                : 
QUESTION_MARK        : 
RBRACE               : 23 38
RBRACKET             : 
RETURN               : 
RPAREN               : 9 10 11 23
SEMICOLON            : 9 10 27 28 29
STRICT_EQUAL         : 
STRING               : 12 35
SUPER                : 
SWITCH               : 
THIS                 : 
THROW                : 
TRY                  : 
TYPEOF               : 
VAR                  : 27 30
VARIABLE             : 10 11 13 20 21 22 22 27 27 28 28 29 29 30 31 32 36 38
VOID                 : 
WHILE                : 
error                : 7 21 22 30 31 32

Nonterminals, with rules where they appear

argument             : 33 34
arguments            : 9 34
condition            : 8
condition_operator   : 23
expression           : 15 15 23 23
factor               : 16 17 18
input                : 6
print                : 4
program              : 0
statement            : 2 3
statements           : 1 3 23
structure_declaration : 5
term                 : 16 17
typed_variable_declaration : 39 40
typed_variable_declarations : 38 40

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . print
    (5) statement -> . structure_declaration
    (6) statement -> . input
    (7) statement -> . error
    (8) statement -> . condition
    (9) print -> . CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON
    (38) structure_declaration -> . CLASS VARIABLE LBRACE typed_variable_declarations RBRACE
    (10) input -> . VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON
    (11) input -> . VARIABLE ASSIGN INPUT LPAREN RPAREN
    (23) condition -> . IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE

    error           shift and go to state 7
    CONSOLE         shift and go to state 9
    CLASS           shift and go to state 10
    VARIABLE        shift and go to state 11
    IF              shift and go to state 12

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    print                          shift and go to state 4
    structure_declaration          shift and go to state 5
    input                          shift and go to state 6
    condition                      shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (4) statement -> . print
    (5) statement -> . structure_declaration
    (6) statement -> . input
    (7) statement -> . error
    (8) statement -> . condition
    (9) print -> . CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON
    (38) structure_declaration -> . CLASS VARIABLE LBRACE typed_variable_declarations RBRACE
    (10) input -> . VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON
    (11) input -> . VARIABLE ASSIGN INPUT LPAREN RPAREN
    (23) condition -> . IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE

    $end            reduce using rule 1 (program -> statements .)
    error           shift and go to state 7
    CONSOLE         shift and go to state 9
    CLASS           shift and go to state 10
    VARIABLE        shift and go to state 11
    IF              shift and go to state 12

    statement                      shift and go to state 13
    print                          shift and go to state 4
    structure_declaration          shift and go to state 5
    input                          shift and go to state 6
    condition                      shift and go to state 8

state 3

    (2) statements -> statement .

    error           reduce using rule 2 (statements -> statement .)
    CONSOLE         reduce using rule 2 (statements -> statement .)
    CLASS           reduce using rule 2 (statements -> statement .)
    VARIABLE        reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    RBRACE          reduce using rule 2 (statements -> statement .)


state 4

    (4) statement -> print .

    error           reduce using rule 4 (statement -> print .)
    CONSOLE         reduce using rule 4 (statement -> print .)
    CLASS           reduce using rule 4 (statement -> print .)
    VARIABLE        reduce using rule 4 (statement -> print .)
    IF              reduce using rule 4 (statement -> print .)
    $end            reduce using rule 4 (statement -> print .)
    RBRACE          reduce using rule 4 (statement -> print .)


state 5

    (5) statement -> structure_declaration .

    error           reduce using rule 5 (statement -> structure_declaration .)
    CONSOLE         reduce using rule 5 (statement -> structure_declaration .)
    CLASS           reduce using rule 5 (statement -> structure_declaration .)
    VARIABLE        reduce using rule 5 (statement -> structure_declaration .)
    IF              reduce using rule 5 (statement -> structure_declaration .)
    $end            reduce using rule 5 (statement -> structure_declaration .)
    RBRACE          reduce using rule 5 (statement -> structure_declaration .)


state 6

    (6) statement -> input .

    error           reduce using rule 6 (statement -> input .)
    CONSOLE         reduce using rule 6 (statement -> input .)
    CLASS           reduce using rule 6 (statement -> input .)
    VARIABLE        reduce using rule 6 (statement -> input .)
    IF              reduce using rule 6 (statement -> input .)
    $end            reduce using rule 6 (statement -> input .)
    RBRACE          reduce using rule 6 (statement -> input .)


state 7

    (7) statement -> error .

    error           reduce using rule 7 (statement -> error .)
    CONSOLE         reduce using rule 7 (statement -> error .)
    CLASS           reduce using rule 7 (statement -> error .)
    VARIABLE        reduce using rule 7 (statement -> error .)
    IF              reduce using rule 7 (statement -> error .)
    $end            reduce using rule 7 (statement -> error .)
    RBRACE          reduce using rule 7 (statement -> error .)


state 8

    (8) statement -> condition .

    error           reduce using rule 8 (statement -> condition .)
    CONSOLE         reduce using rule 8 (statement -> condition .)
    CLASS           reduce using rule 8 (statement -> condition .)
    VARIABLE        reduce using rule 8 (statement -> condition .)
    IF              reduce using rule 8 (statement -> condition .)
    $end            reduce using rule 8 (statement -> condition .)
    RBRACE          reduce using rule 8 (statement -> condition .)


state 9

    (9) print -> CONSOLE . DOT LOG LPAREN arguments RPAREN SEMICOLON

    DOT             shift and go to state 14


state 10

    (38) structure_declaration -> CLASS . VARIABLE LBRACE typed_variable_declarations RBRACE

    VARIABLE        shift and go to state 15


state 11

    (10) input -> VARIABLE . ASSIGN INPUT LPAREN RPAREN SEMICOLON
    (11) input -> VARIABLE . ASSIGN INPUT LPAREN RPAREN

    ASSIGN          shift and go to state 16


state 12

    (23) condition -> IF . LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 17


state 13

    (3) statements -> statements statement .

    error           reduce using rule 3 (statements -> statements statement .)
    CONSOLE         reduce using rule 3 (statements -> statements statement .)
    CLASS           reduce using rule 3 (statements -> statements statement .)
    VARIABLE        reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    RBRACE          reduce using rule 3 (statements -> statements statement .)


state 14

    (9) print -> CONSOLE DOT . LOG LPAREN arguments RPAREN SEMICOLON

    LOG             shift and go to state 18


state 15

    (38) structure_declaration -> CLASS VARIABLE . LBRACE typed_variable_declarations RBRACE

    LBRACE          shift and go to state 19


state 16

    (10) input -> VARIABLE ASSIGN . INPUT LPAREN RPAREN SEMICOLON
    (11) input -> VARIABLE ASSIGN . INPUT LPAREN RPAREN

    INPUT           shift and go to state 20


state 17

    (23) condition -> IF LPAREN . expression condition_operator expression RPAREN LBRACE statements RBRACE
    (12) expression -> . STRING
    (13) expression -> . VARIABLE
    (14) expression -> . NUMBER
    (15) expression -> . expression PLUS expression

    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    NUMBER          shift and go to state 24

    expression                     shift and go to state 21

state 18

    (9) print -> CONSOLE DOT LOG . LPAREN arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 25


state 19

    (38) structure_declaration -> CLASS VARIABLE LBRACE . typed_variable_declarations RBRACE
    (39) typed_variable_declarations -> . typed_variable_declaration
    (40) typed_variable_declarations -> . typed_variable_declarations typed_variable_declaration
    (21) typed_variable_declaration -> . VARIABLE error
    (22) typed_variable_declaration -> . VARIABLE VARIABLE error
    (27) typed_variable_declaration -> . VAR VARIABLE COLON VARIABLE SEMICOLON
    (28) typed_variable_declaration -> . LET VARIABLE COLON VARIABLE SEMICOLON
    (29) typed_variable_declaration -> . CONST VARIABLE COLON VARIABLE SEMICOLON
    (30) typed_variable_declaration -> . VAR VARIABLE error
    (31) typed_variable_declaration -> . LET VARIABLE error
    (32) typed_variable_declaration -> . CONST VARIABLE error

    VARIABLE        shift and go to state 26
    VAR             shift and go to state 29
    LET             shift and go to state 30
    CONST           shift and go to state 31

    typed_variable_declarations    shift and go to state 27
    typed_variable_declaration     shift and go to state 28

state 20

    (10) input -> VARIABLE ASSIGN INPUT . LPAREN RPAREN SEMICOLON
    (11) input -> VARIABLE ASSIGN INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 32


state 21

    (23) condition -> IF LPAREN expression . condition_operator expression RPAREN LBRACE statements RBRACE
    (15) expression -> expression . PLUS expression
    (24) condition_operator -> . EQUAL
    (25) condition_operator -> . GREATER
    (26) condition_operator -> . LESS

    PLUS            shift and go to state 34
    EQUAL           shift and go to state 35
    GREATER         shift and go to state 36
    LESS            shift and go to state 37

    condition_operator             shift and go to state 33

state 22

    (12) expression -> STRING .

    PLUS            reduce using rule 12 (expression -> STRING .)
    EQUAL           reduce using rule 12 (expression -> STRING .)
    GREATER         reduce using rule 12 (expression -> STRING .)
    LESS            reduce using rule 12 (expression -> STRING .)
    RPAREN          reduce using rule 12 (expression -> STRING .)


state 23

    (13) expression -> VARIABLE .

    PLUS            reduce using rule 13 (expression -> VARIABLE .)
    EQUAL           reduce using rule 13 (expression -> VARIABLE .)
    GREATER         reduce using rule 13 (expression -> VARIABLE .)
    LESS            reduce using rule 13 (expression -> VARIABLE .)
    RPAREN          reduce using rule 13 (expression -> VARIABLE .)


state 24

    (14) expression -> NUMBER .

    PLUS            reduce using rule 14 (expression -> NUMBER .)
    EQUAL           reduce using rule 14 (expression -> NUMBER .)
    GREATER         reduce using rule 14 (expression -> NUMBER .)
    LESS            reduce using rule 14 (expression -> NUMBER .)
    RPAREN          reduce using rule 14 (expression -> NUMBER .)


state 25

    (9) print -> CONSOLE DOT LOG LPAREN . arguments RPAREN SEMICOLON
    (33) arguments -> . argument
    (34) arguments -> . argument COMMA arguments
    (35) argument -> . STRING
    (36) argument -> . VARIABLE
    (37) argument -> . NUMBER

    STRING          shift and go to state 40
    VARIABLE        shift and go to state 41
    NUMBER          shift and go to state 42

    arguments                      shift and go to state 38
    argument                       shift and go to state 39

state 26

    (21) typed_variable_declaration -> VARIABLE . error
    (22) typed_variable_declaration -> VARIABLE . VARIABLE error

    error           shift and go to state 44
    VARIABLE        shift and go to state 43


state 27

    (38) structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations . RBRACE
    (40) typed_variable_declarations -> typed_variable_declarations . typed_variable_declaration
    (21) typed_variable_declaration -> . VARIABLE error
    (22) typed_variable_declaration -> . VARIABLE VARIABLE error
    (27) typed_variable_declaration -> . VAR VARIABLE COLON VARIABLE SEMICOLON
    (28) typed_variable_declaration -> . LET VARIABLE COLON VARIABLE SEMICOLON
    (29) typed_variable_declaration -> . CONST VARIABLE COLON VARIABLE SEMICOLON
    (30) typed_variable_declaration -> . VAR VARIABLE error
    (31) typed_variable_declaration -> . LET VARIABLE error
    (32) typed_variable_declaration -> . CONST VARIABLE error

    RBRACE          shift and go to state 45
    VARIABLE        shift and go to state 26
    VAR             shift and go to state 29
    LET             shift and go to state 30
    CONST           shift and go to state 31

    typed_variable_declaration     shift and go to state 46

state 28

    (39) typed_variable_declarations -> typed_variable_declaration .

    RBRACE          reduce using rule 39 (typed_variable_declarations -> typed_variable_declaration .)
    VARIABLE        reduce using rule 39 (typed_variable_declarations -> typed_variable_declaration .)
    VAR             reduce using rule 39 (typed_variable_declarations -> typed_variable_declaration .)
    LET             reduce using rule 39 (typed_variable_declarations -> typed_variable_declaration .)
    CONST           reduce using rule 39 (typed_variable_declarations -> typed_variable_declaration .)


state 29

    (27) typed_variable_declaration -> VAR . VARIABLE COLON VARIABLE SEMICOLON
    (30) typed_variable_declaration -> VAR . VARIABLE error

    VARIABLE        shift and go to state 47


state 30

    (28) typed_variable_declaration -> LET . VARIABLE COLON VARIABLE SEMICOLON
    (31) typed_variable_declaration -> LET . VARIABLE error

    VARIABLE        shift and go to state 48


state 31

    (29) typed_variable_declaration -> CONST . VARIABLE COLON VARIABLE SEMICOLON
    (32) typed_variable_declaration -> CONST . VARIABLE error

    VARIABLE        shift and go to state 49


state 32

    (10) input -> VARIABLE ASSIGN INPUT LPAREN . RPAREN SEMICOLON
    (11) input -> VARIABLE ASSIGN INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 50


state 33

    (23) condition -> IF LPAREN expression condition_operator . expression RPAREN LBRACE statements RBRACE
    (12) expression -> . STRING
    (13) expression -> . VARIABLE
    (14) expression -> . NUMBER
    (15) expression -> . expression PLUS expression

    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    NUMBER          shift and go to state 24

    expression                     shift and go to state 51

state 34

    (15) expression -> expression PLUS . expression
    (12) expression -> . STRING
    (13) expression -> . VARIABLE
    (14) expression -> . NUMBER
    (15) expression -> . expression PLUS expression

    STRING          shift and go to state 22
    VARIABLE        shift and go to state 23
    NUMBER          shift and go to state 24

    expression                     shift and go to state 52

state 35

    (24) condition_operator -> EQUAL .

    STRING          reduce using rule 24 (condition_operator -> EQUAL .)
    VARIABLE        reduce using rule 24 (condition_operator -> EQUAL .)
    NUMBER          reduce using rule 24 (condition_operator -> EQUAL .)


state 36

    (25) condition_operator -> GREATER .

    STRING          reduce using rule 25 (condition_operator -> GREATER .)
    VARIABLE        reduce using rule 25 (condition_operator -> GREATER .)
    NUMBER          reduce using rule 25 (condition_operator -> GREATER .)


state 37

    (26) condition_operator -> LESS .

    STRING          reduce using rule 26 (condition_operator -> LESS .)
    VARIABLE        reduce using rule 26 (condition_operator -> LESS .)
    NUMBER          reduce using rule 26 (condition_operator -> LESS .)


state 38

    (9) print -> CONSOLE DOT LOG LPAREN arguments . RPAREN SEMICOLON

    RPAREN          shift and go to state 53


state 39

    (33) arguments -> argument .
    (34) arguments -> argument . COMMA arguments

    RPAREN          reduce using rule 33 (arguments -> argument .)
    COMMA           shift and go to state 54


state 40

    (35) argument -> STRING .

    COMMA           reduce using rule 35 (argument -> STRING .)
    RPAREN          reduce using rule 35 (argument -> STRING .)


state 41

    (36) argument -> VARIABLE .

    COMMA           reduce using rule 36 (argument -> VARIABLE .)
    RPAREN          reduce using rule 36 (argument -> VARIABLE .)


state 42

    (37) argument -> NUMBER .

    COMMA           reduce using rule 37 (argument -> NUMBER .)
    RPAREN          reduce using rule 37 (argument -> NUMBER .)


state 43

    (22) typed_variable_declaration -> VARIABLE VARIABLE . error

    error           shift and go to state 55


state 44

    (21) typed_variable_declaration -> VARIABLE error .

    RBRACE          reduce using rule 21 (typed_variable_declaration -> VARIABLE error .)
    VARIABLE        reduce using rule 21 (typed_variable_declaration -> VARIABLE error .)
    VAR             reduce using rule 21 (typed_variable_declaration -> VARIABLE error .)
    LET             reduce using rule 21 (typed_variable_declaration -> VARIABLE error .)
    CONST           reduce using rule 21 (typed_variable_declaration -> VARIABLE error .)


state 45

    (38) structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .

    error           reduce using rule 38 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    CONSOLE         reduce using rule 38 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    CLASS           reduce using rule 38 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    VARIABLE        reduce using rule 38 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    IF              reduce using rule 38 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    $end            reduce using rule 38 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    RBRACE          reduce using rule 38 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)


state 46

    (40) typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .

    RBRACE          reduce using rule 40 (typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .)
    VARIABLE        reduce using rule 40 (typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .)
    VAR             reduce using rule 40 (typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .)
    LET             reduce using rule 40 (typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .)
    CONST           reduce using rule 40 (typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .)


state 47

    (27) typed_variable_declaration -> VAR VARIABLE . COLON VARIABLE SEMICOLON
    (30) typed_variable_declaration -> VAR VARIABLE . error

    COLON           shift and go to state 56
    error           shift and go to state 57


state 48

    (28) typed_variable_declaration -> LET VARIABLE . COLON VARIABLE SEMICOLON
    (31) typed_variable_declaration -> LET VARIABLE . error

    COLON           shift and go to state 58
    error           shift and go to state 59


state 49

    (29) typed_variable_declaration -> CONST VARIABLE . COLON VARIABLE SEMICOLON
    (32) typed_variable_declaration -> CONST VARIABLE . error

    COLON           shift and go to state 60
    error           shift and go to state 61


state 50

    (10) input -> VARIABLE ASSIGN INPUT LPAREN RPAREN . SEMICOLON
    (11) input -> VARIABLE ASSIGN INPUT LPAREN RPAREN .

    SEMICOLON       shift and go to state 62
    error           reduce using rule 11 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN .)
    CONSOLE         reduce using rule 11 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN .)
    CLASS           reduce using rule 11 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN .)
    VARIABLE        reduce using rule 11 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN .)
    IF              reduce using rule 11 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN .)
    $end            reduce using rule 11 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN .)
    RBRACE          reduce using rule 11 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN .)


state 51

    (23) condition -> IF LPAREN expression condition_operator expression . RPAREN LBRACE statements RBRACE
    (15) expression -> expression . PLUS expression

    RPAREN          shift and go to state 63
    PLUS            shift and go to state 34


state 52

    (15) expression -> expression PLUS expression .
    (15) expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    EQUAL           reduce using rule 15 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 15 (expression -> expression PLUS expression .)
    LESS            reduce using rule 15 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 15 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 34

  ! PLUS            [ reduce using rule 15 (expression -> expression PLUS expression .) ]


state 53

    (9) print -> CONSOLE DOT LOG LPAREN arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 64


state 54

    (34) arguments -> argument COMMA . arguments
    (33) arguments -> . argument
    (34) arguments -> . argument COMMA arguments
    (35) argument -> . STRING
    (36) argument -> . VARIABLE
    (37) argument -> . NUMBER

    STRING          shift and go to state 40
    VARIABLE        shift and go to state 41
    NUMBER          shift and go to state 42

    argument                       shift and go to state 39
    arguments                      shift and go to state 65

state 55

    (22) typed_variable_declaration -> VARIABLE VARIABLE error .

    RBRACE          reduce using rule 22 (typed_variable_declaration -> VARIABLE VARIABLE error .)
    VARIABLE        reduce using rule 22 (typed_variable_declaration -> VARIABLE VARIABLE error .)
    VAR             reduce using rule 22 (typed_variable_declaration -> VARIABLE VARIABLE error .)
    LET             reduce using rule 22 (typed_variable_declaration -> VARIABLE VARIABLE error .)
    CONST           reduce using rule 22 (typed_variable_declaration -> VARIABLE VARIABLE error .)


state 56

    (27) typed_variable_declaration -> VAR VARIABLE COLON . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 66


state 57

    (30) typed_variable_declaration -> VAR VARIABLE error .

    RBRACE          reduce using rule 30 (typed_variable_declaration -> VAR VARIABLE error .)
    VARIABLE        reduce using rule 30 (typed_variable_declaration -> VAR VARIABLE error .)
    VAR             reduce using rule 30 (typed_variable_declaration -> VAR VARIABLE error .)
    LET             reduce using rule 30 (typed_variable_declaration -> VAR VARIABLE error .)
    CONST           reduce using rule 30 (typed_variable_declaration -> VAR VARIABLE error .)


state 58

    (28) typed_variable_declaration -> LET VARIABLE COLON . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 67


state 59

    (31) typed_variable_declaration -> LET VARIABLE error .

    RBRACE          reduce using rule 31 (typed_variable_declaration -> LET VARIABLE error .)
    VARIABLE        reduce using rule 31 (typed_variable_declaration -> LET VARIABLE error .)
    VAR             reduce using rule 31 (typed_variable_declaration -> LET VARIABLE error .)
    LET             reduce using rule 31 (typed_variable_declaration -> LET VARIABLE error .)
    CONST           reduce using rule 31 (typed_variable_declaration -> LET VARIABLE error .)


state 60

    (29) typed_variable_declaration -> CONST VARIABLE COLON . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 68


state 61

    (32) typed_variable_declaration -> CONST VARIABLE error .

    RBRACE          reduce using rule 32 (typed_variable_declaration -> CONST VARIABLE error .)
    VARIABLE        reduce using rule 32 (typed_variable_declaration -> CONST VARIABLE error .)
    VAR             reduce using rule 32 (typed_variable_declaration -> CONST VARIABLE error .)
    LET             reduce using rule 32 (typed_variable_declaration -> CONST VARIABLE error .)
    CONST           reduce using rule 32 (typed_variable_declaration -> CONST VARIABLE error .)


state 62

    (10) input -> VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON .

    error           reduce using rule 10 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON .)
    CONSOLE         reduce using rule 10 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON .)
    CLASS           reduce using rule 10 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 10 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 10 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 10 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 10 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON .)


state 63

    (23) condition -> IF LPAREN expression condition_operator expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 69


state 64

    (9) print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .

    error           reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    CONSOLE         reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    CLASS           reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    IF              reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    $end            reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    RBRACE          reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)


state 65

    (34) arguments -> argument COMMA arguments .

    RPAREN          reduce using rule 34 (arguments -> argument COMMA arguments .)


state 66

    (27) typed_variable_declaration -> VAR VARIABLE COLON VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 70


state 67

    (28) typed_variable_declaration -> LET VARIABLE COLON VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 71


state 68

    (29) typed_variable_declaration -> CONST VARIABLE COLON VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 72


state 69

    (23) condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . print
    (5) statement -> . structure_declaration
    (6) statement -> . input
    (7) statement -> . error
    (8) statement -> . condition
    (9) print -> . CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON
    (38) structure_declaration -> . CLASS VARIABLE LBRACE typed_variable_declarations RBRACE
    (10) input -> . VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON
    (11) input -> . VARIABLE ASSIGN INPUT LPAREN RPAREN
    (23) condition -> . IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE

    error           shift and go to state 7
    CONSOLE         shift and go to state 9
    CLASS           shift and go to state 10
    VARIABLE        shift and go to state 11
    IF              shift and go to state 12

    statements                     shift and go to state 73
    statement                      shift and go to state 3
    print                          shift and go to state 4
    structure_declaration          shift and go to state 5
    input                          shift and go to state 6
    condition                      shift and go to state 8

state 70

    (27) typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .

    RBRACE          reduce using rule 27 (typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 27 (typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .)
    VAR             reduce using rule 27 (typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .)
    LET             reduce using rule 27 (typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .)
    CONST           reduce using rule 27 (typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .)


state 71

    (28) typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .

    RBRACE          reduce using rule 28 (typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 28 (typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .)
    VAR             reduce using rule 28 (typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .)
    LET             reduce using rule 28 (typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .)
    CONST           reduce using rule 28 (typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .)


state 72

    (29) typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .

    RBRACE          reduce using rule 29 (typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 29 (typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .)
    VAR             reduce using rule 29 (typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .)
    LET             reduce using rule 29 (typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .)
    CONST           reduce using rule 29 (typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .)


state 73

    (23) condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements . RBRACE
    (3) statements -> statements . statement
    (4) statement -> . print
    (5) statement -> . structure_declaration
    (6) statement -> . input
    (7) statement -> . error
    (8) statement -> . condition
    (9) print -> . CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON
    (38) structure_declaration -> . CLASS VARIABLE LBRACE typed_variable_declarations RBRACE
    (10) input -> . VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON
    (11) input -> . VARIABLE ASSIGN INPUT LPAREN RPAREN
    (23) condition -> . IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE

    RBRACE          shift and go to state 74
    error           shift and go to state 7
    CONSOLE         shift and go to state 9
    CLASS           shift and go to state 10
    VARIABLE        shift and go to state 11
    IF              shift and go to state 12

    statement                      shift and go to state 13
    print                          shift and go to state 4
    structure_declaration          shift and go to state 5
    input                          shift and go to state 6
    condition                      shift and go to state 8

state 74

    (23) condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .

    error           reduce using rule 23 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    CONSOLE         reduce using rule 23 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 23 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 23 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 23 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 23 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 23 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
