
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ASSIGN BREAK CASE CATCH CLASS COLON COMMA CONSOLE CONST CONTINUE DEFAULT DELETE DIVIDE DIVIDE_ASSIGN DO DOT ELSE EQUAL EXPORT EXTENDS FINALLY FOR FROM FUNCTION GREATER GREATER_EQUAL IF IMPLEMENTS IMPORT IN INSTANCEOF LBRACE LBRACKET LESS LESS_EQUAL LET LOG LPAREN MINUS MINUS_ASSIGN MODULO MODULO_ASSIGN MULTIPLY MULTIPLY_ASSIGN NEW NOT NOT_EQUAL NUMBER OR PLUS PLUS_ASSIGN PRINT PROMPT QUESTION_MARK RBRACE RBRACKET RETURN RPAREN SEMICOLON STRICT_EQUAL STRING SUPER SWITCH THIS THROW TRY TYPEOF VAR VARIABLE VOID WHILEprogram : statementsstatements : statement\n| statements statementstatement : print\n| structure_declaration\n| input \n| error\n| conditionprint : CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLONinput : VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON\n| LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON\n| VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLONexpression : STRING\n| VARIABLE\n| NUMBER\n| expression PLUS expressionterm : term MULTIPLY factor\n| term DIVIDE factor\n| factorfactor : NUMBER\n| VARIABLEtyped_variable_declaration : VARIABLE error\n| VARIABLE VARIABLE errorcondition : IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACEcondition_operator : EQUAL\n| GREATER\n| LESStyped_variable_declaration : VAR VARIABLE COLON VARIABLE SEMICOLON\n| LET VARIABLE COLON VARIABLE SEMICOLON\n| CONST VARIABLE COLON VARIABLE SEMICOLON\n| VAR VARIABLE error\n| LET VARIABLE error\n| CONST VARIABLE errorarguments : argument\n| argument COMMA argumentsargument : STRING\n| VARIABLE\n| NUMBERstructure_declaration : CLASS VARIABLE LBRACE typed_variable_declarations RBRACEtyped_variable_declarations : typed_variable_declaration\n| typed_variable_declarations typed_variable_declaration'
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,15,32,51,53,55,56,57,72,76,81,82,83,87,88,],[7,7,-2,-4,-5,-6,-7,-8,-3,52,65,-39,67,69,71,-10,-9,-11,-12,7,7,-24,]),'CONSOLE':([0,2,3,4,5,6,7,8,15,53,72,76,81,82,83,87,88,],[9,9,-2,-4,-5,-6,-7,-8,-3,-39,-10,-9,-11,-12,9,9,-24,]),'CLASS':([0,2,3,4,5,6,7,8,15,53,72,76,81,82,83,87,88,],[10,10,-2,-4,-5,-6,-7,-8,-3,-39,-10,-9,-11,-12,10,10,-24,]),'VARIABLE':([0,2,3,4,5,6,7,8,10,12,13,15,21,23,31,32,33,34,35,36,37,41,42,43,44,45,52,53,54,64,65,66,67,68,69,70,71,72,76,81,82,83,84,85,86,87,88,],[11,11,-2,-4,-5,-6,-7,-8,17,19,20,-3,29,32,49,51,32,-40,55,56,57,29,29,-25,-26,-27,-22,-39,-41,49,-23,78,-31,79,-32,80,-33,-10,-9,-11,-12,11,-28,-29,-30,11,-24,]),'LET':([0,2,3,4,5,6,7,8,15,23,33,34,52,53,54,65,67,69,71,72,76,81,82,83,84,85,86,87,88,],[12,12,-2,-4,-5,-6,-7,-8,-3,36,36,-40,-22,-39,-41,-23,-31,-32,-33,-10,-9,-11,-12,12,-28,-29,-30,12,-24,]),'VAR':([0,2,3,4,5,6,7,8,15,23,33,34,52,53,54,65,67,69,71,72,76,81,82,83,84,85,86,87,88,],[13,13,-2,-4,-5,-6,-7,-8,-3,35,35,-40,-22,-39,-41,-23,-31,-32,-33,-10,-9,-11,-12,13,-28,-29,-30,13,-24,]),'IF':([0,2,3,4,5,6,7,8,15,53,72,76,81,82,83,87,88,],[14,14,-2,-4,-5,-6,-7,-8,-3,-39,-10,-9,-11,-12,14,14,-24,]),'$end':([1,2,3,4,5,6,7,8,15,53,72,76,81,82,88,],[0,-1,-2,-4,-5,-6,-7,-8,-3,-39,-10,-9,-11,-12,-24,]),'RBRACE':([3,4,5,6,7,8,15,33,34,52,53,54,65,67,69,71,72,76,81,82,84,85,86,87,88,],[-2,-4,-5,-6,-7,-8,-3,53,-40,-22,-39,-41,-23,-31,-32,-33,-10,-9,-11,-12,-28,-29,-30,88,-24,]),'DOT':([9,],[16,]),'ASSIGN':([11,19,20,],[18,25,26,]),'LPAREN':([14,22,24,39,40,],[21,31,38,59,60,]),'LOG':([16,],[22,]),'LBRACE':([17,75,],[23,83,]),'PROMPT':([18,25,26,],[24,39,40,]),'STRING':([21,31,41,42,43,44,45,64,],[28,48,28,28,-25,-26,-27,48,]),'NUMBER':([21,31,41,42,43,44,45,64,],[30,50,30,30,-25,-26,-27,50,]),'CONST':([23,33,34,52,54,65,67,69,71,84,85,86,],[37,37,-40,-22,-41,-23,-31,-32,-33,-28,-29,-30,]),'PLUS':([27,28,29,30,61,62,],[42,-13,-14,-15,42,42,]),'EQUAL':([27,28,29,30,62,],[43,-13,-14,-15,-16,]),'GREATER':([27,28,29,30,62,],[44,-13,-14,-15,-16,]),'LESS':([27,28,29,30,62,],[45,-13,-14,-15,-16,]),'RPAREN':([28,29,30,38,46,47,48,49,50,59,60,61,62,77,],[-13,-14,-15,58,63,-34,-36,-37,-38,73,74,75,-16,-35,]),'COMMA':([47,48,49,50,],[64,-36,-37,-38,]),'COLON':([55,56,57,],[66,68,70,]),'SEMICOLON':([58,63,73,74,78,79,80,],[72,76,81,82,84,85,86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,83,],[2,87,]),'statement':([0,2,83,87,],[3,15,3,15,]),'print':([0,2,83,87,],[4,4,4,4,]),'structure_declaration':([0,2,83,87,],[5,5,5,5,]),'input':([0,2,83,87,],[6,6,6,6,]),'condition':([0,2,83,87,],[8,8,8,8,]),'expression':([21,41,42,],[27,61,62,]),'typed_variable_declarations':([23,],[33,]),'typed_variable_declaration':([23,33,],[34,54,]),'condition_operator':([27,],[41,]),'arguments':([31,64,],[46,77,]),'argument':([31,64,],[47,47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','syntax_analyzer.py',10),
  ('statements -> statement','statements',1,'p_statements','syntax_analyzer.py',13),
  ('statements -> statements statement','statements',2,'p_statements','syntax_analyzer.py',14),
  ('statement -> print','statement',1,'p_statement','syntax_analyzer.py',18),
  ('statement -> structure_declaration','statement',1,'p_statement','syntax_analyzer.py',19),
  ('statement -> input','statement',1,'p_statement','syntax_analyzer.py',20),
  ('statement -> error','statement',1,'p_statement','syntax_analyzer.py',21),
  ('statement -> condition','statement',1,'p_statement','syntax_analyzer.py',22),
  ('print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON','print',7,'p_print','syntax_analyzer.py',29),
  ('input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON','input',6,'p_input','syntax_analyzer.py',33),
  ('input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON','input',7,'p_input','syntax_analyzer.py',34),
  ('input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON','input',7,'p_input','syntax_analyzer.py',35),
  ('expression -> STRING','expression',1,'p_expression','syntax_analyzer.py',40),
  ('expression -> VARIABLE','expression',1,'p_expression','syntax_analyzer.py',41),
  ('expression -> NUMBER','expression',1,'p_expression','syntax_analyzer.py',42),
  ('expression -> expression PLUS expression','expression',3,'p_expression','syntax_analyzer.py',43),
  ('term -> term MULTIPLY factor','term',3,'p_term','syntax_analyzer.py',50),
  ('term -> term DIVIDE factor','term',3,'p_term','syntax_analyzer.py',51),
  ('term -> factor','term',1,'p_term','syntax_analyzer.py',52),
  ('factor -> NUMBER','factor',1,'p_factor','syntax_analyzer.py',56),
  ('factor -> VARIABLE','factor',1,'p_factor','syntax_analyzer.py',57),
  ('typed_variable_declaration -> VARIABLE error','typed_variable_declaration',2,'p_invalid_declaration','syntax_analyzer.py',61),
  ('typed_variable_declaration -> VARIABLE VARIABLE error','typed_variable_declaration',3,'p_invalid_declaration','syntax_analyzer.py',62),
  ('condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE','condition',9,'p_condition','syntax_analyzer.py',70),
  ('condition_operator -> EQUAL','condition_operator',1,'p_condition_operator','syntax_analyzer.py',74),
  ('condition_operator -> GREATER','condition_operator',1,'p_condition_operator','syntax_analyzer.py',75),
  ('condition_operator -> LESS','condition_operator',1,'p_condition_operator','syntax_analyzer.py',76),
  ('typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON','typed_variable_declaration',5,'p_typed_variable_declaration','syntax_analyzer.py',80),
  ('typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON','typed_variable_declaration',5,'p_typed_variable_declaration','syntax_analyzer.py',81),
  ('typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON','typed_variable_declaration',5,'p_typed_variable_declaration','syntax_analyzer.py',82),
  ('typed_variable_declaration -> VAR VARIABLE error','typed_variable_declaration',3,'p_typed_variable_declaration','syntax_analyzer.py',83),
  ('typed_variable_declaration -> LET VARIABLE error','typed_variable_declaration',3,'p_typed_variable_declaration','syntax_analyzer.py',84),
  ('typed_variable_declaration -> CONST VARIABLE error','typed_variable_declaration',3,'p_typed_variable_declaration','syntax_analyzer.py',85),
  ('arguments -> argument','arguments',1,'p_arguments','syntax_analyzer.py',98),
  ('arguments -> argument COMMA arguments','arguments',3,'p_arguments','syntax_analyzer.py',99),
  ('argument -> STRING','argument',1,'p_argument','syntax_analyzer.py',107),
  ('argument -> VARIABLE','argument',1,'p_argument','syntax_analyzer.py',108),
  ('argument -> NUMBER','argument',1,'p_argument','syntax_analyzer.py',109),
  ('structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE','structure_declaration',5,'p_structure_declaration','syntax_analyzer.py',113),
  ('typed_variable_declarations -> typed_variable_declaration','typed_variable_declarations',1,'p_typed_variable_declarations','syntax_analyzer.py',117),
  ('typed_variable_declarations -> typed_variable_declarations typed_variable_declaration','typed_variable_declarations',2,'p_typed_variable_declarations','syntax_analyzer.py',118),
]
