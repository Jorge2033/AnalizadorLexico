Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AS
    BREAK
    CASE
    CATCH
    COLON
    CONST
    CONTINUE
    DEFAULT
    DELETE
    DIVIDE_ASSIGN
    DO
    DOT
    ELSE
    EQUAL
    EXPORT
    EXTENDS
    FINALLY
    FOR
    FROM
    FUNCTION
    GREATER
    GREATER_EQUAL
    IF
    IMPLEMENTS
    IMPORT
    IN
    INSTANCEOF
    LBRACKET
    LESS
    LESS_EQUAL
    LET
    MINUS_ASSIGN
    MODULO
    MODULO_ASSIGN
    MULTIPLY_ASSIGN
    NEW
    NOT
    NOT_EQUAL
    OR
    PLUS_ASSIGN
    QUESTION_MARK
    RBRACKET
    RETURN
    STRICT_EQUAL
    SUPER
    SWITCH
    THIS
    THROW
    TRY
    TYPEOF
    VAR
    VOID
    WHILE

Grammar

Rule 0     S' -> input
Rule 1     input -> VARIABLE ASSIGN INPUT LPAREN RPAREN
Rule 2     expression -> expression PLUS term
Rule 3     expression -> expression MINUS term
Rule 4     expression -> term
Rule 5     term -> term MULTIPLY factor
Rule 6     term -> term DIVIDE factor
Rule 7     term -> factor
Rule 8     factor -> NUMBER
Rule 9     factor -> VARIABLE
Rule 10    program -> statements
Rule 11    statements -> statement
Rule 12    statements -> statement statements
Rule 13    statement -> print
Rule 14    statement -> structure_declaration
Rule 15    statement -> input
Rule 16    statement -> error
Rule 17    print -> PRINT LPAREN arguments RPAREN SEMICOLON
Rule 18    arguments -> argument
Rule 19    arguments -> argument COMMA arguments
Rule 20    argument -> STRING
Rule 21    argument -> VARIABLE
Rule 22    structure_declaration -> CLASS VARIABLE LBRACE statements RBRACE

Terminals, with rules where they appear

AND                  : 
AS                   : 
ASSIGN               : 1
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 22
COLON                : 
COMMA                : 19
CONST                : 
CONTINUE             : 
DEFAULT              : 
DELETE               : 
DIVIDE               : 6
DIVIDE_ASSIGN        : 
DO                   : 
DOT                  : 
ELSE                 : 
EQUAL                : 
EXPORT               : 
EXTENDS              : 
FINALLY              : 
FOR                  : 
FROM                 : 
FUNCTION             : 
GREATER              : 
GREATER_EQUAL        : 
IF                   : 
IMPLEMENTS           : 
IMPORT               : 
IN                   : 
INPUT                : 1
INSTANCEOF           : 
LBRACE               : 22
LBRACKET             : 
LESS                 : 
LESS_EQUAL           : 
LET                  : 
LPAREN               : 1 17
MINUS                : 3
MINUS_ASSIGN         : 
MODULO               : 
MODULO_ASSIGN        : 
MULTIPLY             : 5
MULTIPLY_ASSIGN      : 
NEW                  : 
NOT                  : 
NOT_EQUAL            : 
NUMBER               : 8
OR                   : 
PLUS                 : 2
PLUS_ASSIGN          : 
PRINT                : 17
QUESTION_MARK        : 
RBRACE               : 22
RBRACKET             : 
RETURN               : 
RPAREN               : 1 17
SEMICOLON            : 17
STRICT_EQUAL         : 
STRING               : 20
SUPER                : 
SWITCH               : 
THIS                 : 
THROW                : 
TRY                  : 
TYPEOF               : 
VAR                  : 
VARIABLE             : 1 9 21 22
VOID                 : 
WHILE                : 
error                : 16

Nonterminals, with rules where they appear

argument             : 18 19
arguments            : 17 19
expression           : 2 3
factor               : 5 6 7
input                : 15 0
print                : 13
program              : 
statement            : 11 12
statements           : 10 12 22
structure_declaration : 14
term                 : 2 3 4 5 6

Parsing method: LALR

state 0

    (0) S' -> . input
    (1) input -> . VARIABLE ASSIGN INPUT LPAREN RPAREN

    VARIABLE        shift and go to state 2

    input                          shift and go to state 1

state 1

    (0) S' -> input .



state 2

    (1) input -> VARIABLE . ASSIGN INPUT LPAREN RPAREN

    ASSIGN          shift and go to state 3


state 3

    (1) input -> VARIABLE ASSIGN . INPUT LPAREN RPAREN

    INPUT           shift and go to state 4


state 4

    (1) input -> VARIABLE ASSIGN INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 5


state 5

    (1) input -> VARIABLE ASSIGN INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 6


state 6

    (1) input -> VARIABLE ASSIGN INPUT LPAREN RPAREN .

    $end            reduce using rule 1 (input -> VARIABLE ASSIGN INPUT LPAREN RPAREN .)

