Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AS
    BREAK
    CASE
    CATCH
    CONTINUE
    DEFAULT
    DELETE
    DIVIDE_ASSIGN
    DO
    ELSE
    EXPORT
    EXTENDS
    FINALLY
    FOR
    FROM
    FUNCTION
    GREATER_EQUAL
    IMPLEMENTS
    IMPORT
    IN
    INSTANCEOF
    LBRACKET
    LESS_EQUAL
    MINUS
    MINUS_ASSIGN
    MODULO
    MODULO_ASSIGN
    MULTIPLY_ASSIGN
    NEW
    NOT
    NOT_EQUAL
    OR
    PLUS_ASSIGN
    PRINT
    QUESTION_MARK
    RBRACKET
    RETURN
    STRICT_EQUAL
    SUPER
    SWITCH
    THIS
    THROW
    TRY
    TYPEOF
    VOID
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     statement -> print
Rule 5     statement -> structure_declaration
Rule 6     statement -> input
Rule 7     statement -> error
Rule 8     statement -> condition
Rule 9     print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON
Rule 10    input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
Rule 11    input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
Rule 12    input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
Rule 13    expression -> STRING
Rule 14    expression -> VARIABLE
Rule 15    expression -> NUMBER
Rule 16    expression -> expression PLUS expression
Rule 17    term -> term MULTIPLY factor
Rule 18    term -> term DIVIDE factor
Rule 19    term -> factor
Rule 20    factor -> NUMBER
Rule 21    factor -> VARIABLE
Rule 22    typed_variable_declaration -> VARIABLE error
Rule 23    typed_variable_declaration -> VARIABLE VARIABLE error
Rule 24    condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE
Rule 25    condition_operator -> EQUAL
Rule 26    condition_operator -> GREATER
Rule 27    condition_operator -> LESS
Rule 28    typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON
Rule 29    typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON
Rule 30    typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON
Rule 31    typed_variable_declaration -> VAR VARIABLE error
Rule 32    typed_variable_declaration -> LET VARIABLE error
Rule 33    typed_variable_declaration -> CONST VARIABLE error
Rule 34    arguments -> argument
Rule 35    arguments -> argument COMMA arguments
Rule 36    argument -> STRING
Rule 37    argument -> VARIABLE
Rule 38    argument -> NUMBER
Rule 39    structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE
Rule 40    typed_variable_declarations -> typed_variable_declaration
Rule 41    typed_variable_declarations -> typed_variable_declarations typed_variable_declaration

Terminals, with rules where they appear

AND                  : 
AS                   : 
ASSIGN               : 10 11 12
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 39
COLON                : 28 29 30
COMMA                : 35
CONSOLE              : 9
CONST                : 30 33
CONTINUE             : 
DEFAULT              : 
DELETE               : 
DIVIDE               : 18
DIVIDE_ASSIGN        : 
DO                   : 
DOT                  : 9
ELSE                 : 
EQUAL                : 25
EXPORT               : 
EXTENDS              : 
FINALLY              : 
FOR                  : 
FROM                 : 
FUNCTION             : 
GREATER              : 26
GREATER_EQUAL        : 
IF                   : 24
IMPLEMENTS           : 
IMPORT               : 
IN                   : 
INSTANCEOF           : 
LBRACE               : 24 39
LBRACKET             : 
LESS                 : 27
LESS_EQUAL           : 
LET                  : 11 29 32
LOG                  : 9
LPAREN               : 9 10 11 12 24
MINUS                : 
MINUS_ASSIGN         : 
MODULO               : 
MODULO_ASSIGN        : 
MULTIPLY             : 17
MULTIPLY_ASSIGN      : 
NEW                  : 
NOT                  : 
NOT_EQUAL            : 
NUMBER               : 15 20 38
OR                   : 
PLUS                 : 16
PLUS_ASSIGN          : 
PRINT                : 
PROMPT               : 10 11 12
QUESTION_MARK        : 
RBRACE               : 24 39
RBRACKET             : 
RETURN               : 
RPAREN               : 9 10 11 12 24
SEMICOLON            : 9 10 11 12 28 29 30
STRICT_EQUAL         : 
STRING               : 13 36
SUPER                : 
SWITCH               : 
THIS                 : 
THROW                : 
TRY                  : 
TYPEOF               : 
VAR                  : 12 28 31
VARIABLE             : 10 11 12 14 21 22 23 23 28 28 29 29 30 30 31 32 33 37 39
VOID                 : 
WHILE                : 
error                : 7 22 23 31 32 33

Nonterminals, with rules where they appear

argument             : 34 35
arguments            : 9 35
condition            : 8
condition_operator   : 24
expression           : 16 16 24 24
factor               : 17 18 19
input                : 6
print                : 4
program              : 0
statement            : 2 3
statements           : 1 3 24
structure_declaration : 5
term                 : 17 18
typed_variable_declaration : 40 41
typed_variable_declarations : 39 41

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . print
    (5) statement -> . structure_declaration
    (6) statement -> . input
    (7) statement -> . error
    (8) statement -> . condition
    (9) print -> . CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON
    (39) structure_declaration -> . CLASS VARIABLE LBRACE typed_variable_declarations RBRACE
    (10) input -> . VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (11) input -> . LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (12) input -> . VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (24) condition -> . IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE

    error           shift and go to state 7
    CONSOLE         shift and go to state 9
    CLASS           shift and go to state 10
    VARIABLE        shift and go to state 11
    LET             shift and go to state 12
    VAR             shift and go to state 13
    IF              shift and go to state 14

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    print                          shift and go to state 4
    structure_declaration          shift and go to state 5
    input                          shift and go to state 6
    condition                      shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (4) statement -> . print
    (5) statement -> . structure_declaration
    (6) statement -> . input
    (7) statement -> . error
    (8) statement -> . condition
    (9) print -> . CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON
    (39) structure_declaration -> . CLASS VARIABLE LBRACE typed_variable_declarations RBRACE
    (10) input -> . VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (11) input -> . LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (12) input -> . VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (24) condition -> . IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE

    $end            reduce using rule 1 (program -> statements .)
    error           shift and go to state 7
    CONSOLE         shift and go to state 9
    CLASS           shift and go to state 10
    VARIABLE        shift and go to state 11
    LET             shift and go to state 12
    VAR             shift and go to state 13
    IF              shift and go to state 14

    statement                      shift and go to state 15
    print                          shift and go to state 4
    structure_declaration          shift and go to state 5
    input                          shift and go to state 6
    condition                      shift and go to state 8

state 3

    (2) statements -> statement .

    error           reduce using rule 2 (statements -> statement .)
    CONSOLE         reduce using rule 2 (statements -> statement .)
    CLASS           reduce using rule 2 (statements -> statement .)
    VARIABLE        reduce using rule 2 (statements -> statement .)
    LET             reduce using rule 2 (statements -> statement .)
    VAR             reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    RBRACE          reduce using rule 2 (statements -> statement .)


state 4

    (4) statement -> print .

    error           reduce using rule 4 (statement -> print .)
    CONSOLE         reduce using rule 4 (statement -> print .)
    CLASS           reduce using rule 4 (statement -> print .)
    VARIABLE        reduce using rule 4 (statement -> print .)
    LET             reduce using rule 4 (statement -> print .)
    VAR             reduce using rule 4 (statement -> print .)
    IF              reduce using rule 4 (statement -> print .)
    $end            reduce using rule 4 (statement -> print .)
    RBRACE          reduce using rule 4 (statement -> print .)


state 5

    (5) statement -> structure_declaration .

    error           reduce using rule 5 (statement -> structure_declaration .)
    CONSOLE         reduce using rule 5 (statement -> structure_declaration .)
    CLASS           reduce using rule 5 (statement -> structure_declaration .)
    VARIABLE        reduce using rule 5 (statement -> structure_declaration .)
    LET             reduce using rule 5 (statement -> structure_declaration .)
    VAR             reduce using rule 5 (statement -> structure_declaration .)
    IF              reduce using rule 5 (statement -> structure_declaration .)
    $end            reduce using rule 5 (statement -> structure_declaration .)
    RBRACE          reduce using rule 5 (statement -> structure_declaration .)


state 6

    (6) statement -> input .

    error           reduce using rule 6 (statement -> input .)
    CONSOLE         reduce using rule 6 (statement -> input .)
    CLASS           reduce using rule 6 (statement -> input .)
    VARIABLE        reduce using rule 6 (statement -> input .)
    LET             reduce using rule 6 (statement -> input .)
    VAR             reduce using rule 6 (statement -> input .)
    IF              reduce using rule 6 (statement -> input .)
    $end            reduce using rule 6 (statement -> input .)
    RBRACE          reduce using rule 6 (statement -> input .)


state 7

    (7) statement -> error .

    error           reduce using rule 7 (statement -> error .)
    CONSOLE         reduce using rule 7 (statement -> error .)
    CLASS           reduce using rule 7 (statement -> error .)
    VARIABLE        reduce using rule 7 (statement -> error .)
    LET             reduce using rule 7 (statement -> error .)
    VAR             reduce using rule 7 (statement -> error .)
    IF              reduce using rule 7 (statement -> error .)
    $end            reduce using rule 7 (statement -> error .)
    RBRACE          reduce using rule 7 (statement -> error .)


state 8

    (8) statement -> condition .

    error           reduce using rule 8 (statement -> condition .)
    CONSOLE         reduce using rule 8 (statement -> condition .)
    CLASS           reduce using rule 8 (statement -> condition .)
    VARIABLE        reduce using rule 8 (statement -> condition .)
    LET             reduce using rule 8 (statement -> condition .)
    VAR             reduce using rule 8 (statement -> condition .)
    IF              reduce using rule 8 (statement -> condition .)
    $end            reduce using rule 8 (statement -> condition .)
    RBRACE          reduce using rule 8 (statement -> condition .)


state 9

    (9) print -> CONSOLE . DOT LOG LPAREN arguments RPAREN SEMICOLON

    DOT             shift and go to state 16


state 10

    (39) structure_declaration -> CLASS . VARIABLE LBRACE typed_variable_declarations RBRACE

    VARIABLE        shift and go to state 17


state 11

    (10) input -> VARIABLE . ASSIGN PROMPT LPAREN RPAREN SEMICOLON

    ASSIGN          shift and go to state 18


state 12

    (11) input -> LET . VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON

    VARIABLE        shift and go to state 19


state 13

    (12) input -> VAR . VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON

    VARIABLE        shift and go to state 20


state 14

    (24) condition -> IF . LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 21


state 15

    (3) statements -> statements statement .

    error           reduce using rule 3 (statements -> statements statement .)
    CONSOLE         reduce using rule 3 (statements -> statements statement .)
    CLASS           reduce using rule 3 (statements -> statements statement .)
    VARIABLE        reduce using rule 3 (statements -> statements statement .)
    LET             reduce using rule 3 (statements -> statements statement .)
    VAR             reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    RBRACE          reduce using rule 3 (statements -> statements statement .)


state 16

    (9) print -> CONSOLE DOT . LOG LPAREN arguments RPAREN SEMICOLON

    LOG             shift and go to state 22


state 17

    (39) structure_declaration -> CLASS VARIABLE . LBRACE typed_variable_declarations RBRACE

    LBRACE          shift and go to state 23


state 18

    (10) input -> VARIABLE ASSIGN . PROMPT LPAREN RPAREN SEMICOLON

    PROMPT          shift and go to state 24


state 19

    (11) input -> LET VARIABLE . ASSIGN PROMPT LPAREN RPAREN SEMICOLON

    ASSIGN          shift and go to state 25


state 20

    (12) input -> VAR VARIABLE . ASSIGN PROMPT LPAREN RPAREN SEMICOLON

    ASSIGN          shift and go to state 26


state 21

    (24) condition -> IF LPAREN . expression condition_operator expression RPAREN LBRACE statements RBRACE
    (13) expression -> . STRING
    (14) expression -> . VARIABLE
    (15) expression -> . NUMBER
    (16) expression -> . expression PLUS expression

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 29
    NUMBER          shift and go to state 30

    expression                     shift and go to state 27

state 22

    (9) print -> CONSOLE DOT LOG . LPAREN arguments RPAREN SEMICOLON

    LPAREN          shift and go to state 31


state 23

    (39) structure_declaration -> CLASS VARIABLE LBRACE . typed_variable_declarations RBRACE
    (40) typed_variable_declarations -> . typed_variable_declaration
    (41) typed_variable_declarations -> . typed_variable_declarations typed_variable_declaration
    (22) typed_variable_declaration -> . VARIABLE error
    (23) typed_variable_declaration -> . VARIABLE VARIABLE error
    (28) typed_variable_declaration -> . VAR VARIABLE COLON VARIABLE SEMICOLON
    (29) typed_variable_declaration -> . LET VARIABLE COLON VARIABLE SEMICOLON
    (30) typed_variable_declaration -> . CONST VARIABLE COLON VARIABLE SEMICOLON
    (31) typed_variable_declaration -> . VAR VARIABLE error
    (32) typed_variable_declaration -> . LET VARIABLE error
    (33) typed_variable_declaration -> . CONST VARIABLE error

    VARIABLE        shift and go to state 32
    VAR             shift and go to state 35
    LET             shift and go to state 36
    CONST           shift and go to state 37

    typed_variable_declarations    shift and go to state 33
    typed_variable_declaration     shift and go to state 34

state 24

    (10) input -> VARIABLE ASSIGN PROMPT . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 38


state 25

    (11) input -> LET VARIABLE ASSIGN . PROMPT LPAREN RPAREN SEMICOLON

    PROMPT          shift and go to state 39


state 26

    (12) input -> VAR VARIABLE ASSIGN . PROMPT LPAREN RPAREN SEMICOLON

    PROMPT          shift and go to state 40


state 27

    (24) condition -> IF LPAREN expression . condition_operator expression RPAREN LBRACE statements RBRACE
    (16) expression -> expression . PLUS expression
    (25) condition_operator -> . EQUAL
    (26) condition_operator -> . GREATER
    (27) condition_operator -> . LESS

    PLUS            shift and go to state 42
    EQUAL           shift and go to state 43
    GREATER         shift and go to state 44
    LESS            shift and go to state 45

    condition_operator             shift and go to state 41

state 28

    (13) expression -> STRING .

    PLUS            reduce using rule 13 (expression -> STRING .)
    EQUAL           reduce using rule 13 (expression -> STRING .)
    GREATER         reduce using rule 13 (expression -> STRING .)
    LESS            reduce using rule 13 (expression -> STRING .)
    RPAREN          reduce using rule 13 (expression -> STRING .)


state 29

    (14) expression -> VARIABLE .

    PLUS            reduce using rule 14 (expression -> VARIABLE .)
    EQUAL           reduce using rule 14 (expression -> VARIABLE .)
    GREATER         reduce using rule 14 (expression -> VARIABLE .)
    LESS            reduce using rule 14 (expression -> VARIABLE .)
    RPAREN          reduce using rule 14 (expression -> VARIABLE .)


state 30

    (15) expression -> NUMBER .

    PLUS            reduce using rule 15 (expression -> NUMBER .)
    EQUAL           reduce using rule 15 (expression -> NUMBER .)
    GREATER         reduce using rule 15 (expression -> NUMBER .)
    LESS            reduce using rule 15 (expression -> NUMBER .)
    RPAREN          reduce using rule 15 (expression -> NUMBER .)


state 31

    (9) print -> CONSOLE DOT LOG LPAREN . arguments RPAREN SEMICOLON
    (34) arguments -> . argument
    (35) arguments -> . argument COMMA arguments
    (36) argument -> . STRING
    (37) argument -> . VARIABLE
    (38) argument -> . NUMBER

    STRING          shift and go to state 48
    VARIABLE        shift and go to state 49
    NUMBER          shift and go to state 50

    arguments                      shift and go to state 46
    argument                       shift and go to state 47

state 32

    (22) typed_variable_declaration -> VARIABLE . error
    (23) typed_variable_declaration -> VARIABLE . VARIABLE error

    error           shift and go to state 52
    VARIABLE        shift and go to state 51


state 33

    (39) structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations . RBRACE
    (41) typed_variable_declarations -> typed_variable_declarations . typed_variable_declaration
    (22) typed_variable_declaration -> . VARIABLE error
    (23) typed_variable_declaration -> . VARIABLE VARIABLE error
    (28) typed_variable_declaration -> . VAR VARIABLE COLON VARIABLE SEMICOLON
    (29) typed_variable_declaration -> . LET VARIABLE COLON VARIABLE SEMICOLON
    (30) typed_variable_declaration -> . CONST VARIABLE COLON VARIABLE SEMICOLON
    (31) typed_variable_declaration -> . VAR VARIABLE error
    (32) typed_variable_declaration -> . LET VARIABLE error
    (33) typed_variable_declaration -> . CONST VARIABLE error

    RBRACE          shift and go to state 53
    VARIABLE        shift and go to state 32
    VAR             shift and go to state 35
    LET             shift and go to state 36
    CONST           shift and go to state 37

    typed_variable_declaration     shift and go to state 54

state 34

    (40) typed_variable_declarations -> typed_variable_declaration .

    RBRACE          reduce using rule 40 (typed_variable_declarations -> typed_variable_declaration .)
    VARIABLE        reduce using rule 40 (typed_variable_declarations -> typed_variable_declaration .)
    VAR             reduce using rule 40 (typed_variable_declarations -> typed_variable_declaration .)
    LET             reduce using rule 40 (typed_variable_declarations -> typed_variable_declaration .)
    CONST           reduce using rule 40 (typed_variable_declarations -> typed_variable_declaration .)


state 35

    (28) typed_variable_declaration -> VAR . VARIABLE COLON VARIABLE SEMICOLON
    (31) typed_variable_declaration -> VAR . VARIABLE error

    VARIABLE        shift and go to state 55


state 36

    (29) typed_variable_declaration -> LET . VARIABLE COLON VARIABLE SEMICOLON
    (32) typed_variable_declaration -> LET . VARIABLE error

    VARIABLE        shift and go to state 56


state 37

    (30) typed_variable_declaration -> CONST . VARIABLE COLON VARIABLE SEMICOLON
    (33) typed_variable_declaration -> CONST . VARIABLE error

    VARIABLE        shift and go to state 57


state 38

    (10) input -> VARIABLE ASSIGN PROMPT LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 58


state 39

    (11) input -> LET VARIABLE ASSIGN PROMPT . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 59


state 40

    (12) input -> VAR VARIABLE ASSIGN PROMPT . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 60


state 41

    (24) condition -> IF LPAREN expression condition_operator . expression RPAREN LBRACE statements RBRACE
    (13) expression -> . STRING
    (14) expression -> . VARIABLE
    (15) expression -> . NUMBER
    (16) expression -> . expression PLUS expression

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 29
    NUMBER          shift and go to state 30

    expression                     shift and go to state 61

state 42

    (16) expression -> expression PLUS . expression
    (13) expression -> . STRING
    (14) expression -> . VARIABLE
    (15) expression -> . NUMBER
    (16) expression -> . expression PLUS expression

    STRING          shift and go to state 28
    VARIABLE        shift and go to state 29
    NUMBER          shift and go to state 30

    expression                     shift and go to state 62

state 43

    (25) condition_operator -> EQUAL .

    STRING          reduce using rule 25 (condition_operator -> EQUAL .)
    VARIABLE        reduce using rule 25 (condition_operator -> EQUAL .)
    NUMBER          reduce using rule 25 (condition_operator -> EQUAL .)


state 44

    (26) condition_operator -> GREATER .

    STRING          reduce using rule 26 (condition_operator -> GREATER .)
    VARIABLE        reduce using rule 26 (condition_operator -> GREATER .)
    NUMBER          reduce using rule 26 (condition_operator -> GREATER .)


state 45

    (27) condition_operator -> LESS .

    STRING          reduce using rule 27 (condition_operator -> LESS .)
    VARIABLE        reduce using rule 27 (condition_operator -> LESS .)
    NUMBER          reduce using rule 27 (condition_operator -> LESS .)


state 46

    (9) print -> CONSOLE DOT LOG LPAREN arguments . RPAREN SEMICOLON

    RPAREN          shift and go to state 63


state 47

    (34) arguments -> argument .
    (35) arguments -> argument . COMMA arguments

    RPAREN          reduce using rule 34 (arguments -> argument .)
    COMMA           shift and go to state 64


state 48

    (36) argument -> STRING .

    COMMA           reduce using rule 36 (argument -> STRING .)
    RPAREN          reduce using rule 36 (argument -> STRING .)


state 49

    (37) argument -> VARIABLE .

    COMMA           reduce using rule 37 (argument -> VARIABLE .)
    RPAREN          reduce using rule 37 (argument -> VARIABLE .)


state 50

    (38) argument -> NUMBER .

    COMMA           reduce using rule 38 (argument -> NUMBER .)
    RPAREN          reduce using rule 38 (argument -> NUMBER .)


state 51

    (23) typed_variable_declaration -> VARIABLE VARIABLE . error

    error           shift and go to state 65


state 52

    (22) typed_variable_declaration -> VARIABLE error .

    RBRACE          reduce using rule 22 (typed_variable_declaration -> VARIABLE error .)
    VARIABLE        reduce using rule 22 (typed_variable_declaration -> VARIABLE error .)
    VAR             reduce using rule 22 (typed_variable_declaration -> VARIABLE error .)
    LET             reduce using rule 22 (typed_variable_declaration -> VARIABLE error .)
    CONST           reduce using rule 22 (typed_variable_declaration -> VARIABLE error .)


state 53

    (39) structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .

    error           reduce using rule 39 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    CONSOLE         reduce using rule 39 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    CLASS           reduce using rule 39 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    VARIABLE        reduce using rule 39 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    LET             reduce using rule 39 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    VAR             reduce using rule 39 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    IF              reduce using rule 39 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    $end            reduce using rule 39 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)
    RBRACE          reduce using rule 39 (structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE .)


state 54

    (41) typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .

    RBRACE          reduce using rule 41 (typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .)
    VARIABLE        reduce using rule 41 (typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .)
    VAR             reduce using rule 41 (typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .)
    LET             reduce using rule 41 (typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .)
    CONST           reduce using rule 41 (typed_variable_declarations -> typed_variable_declarations typed_variable_declaration .)


state 55

    (28) typed_variable_declaration -> VAR VARIABLE . COLON VARIABLE SEMICOLON
    (31) typed_variable_declaration -> VAR VARIABLE . error

    COLON           shift and go to state 66
    error           shift and go to state 67


state 56

    (29) typed_variable_declaration -> LET VARIABLE . COLON VARIABLE SEMICOLON
    (32) typed_variable_declaration -> LET VARIABLE . error

    COLON           shift and go to state 68
    error           shift and go to state 69


state 57

    (30) typed_variable_declaration -> CONST VARIABLE . COLON VARIABLE SEMICOLON
    (33) typed_variable_declaration -> CONST VARIABLE . error

    COLON           shift and go to state 70
    error           shift and go to state 71


state 58

    (10) input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 72


state 59

    (11) input -> LET VARIABLE ASSIGN PROMPT LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 73


state 60

    (12) input -> VAR VARIABLE ASSIGN PROMPT LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 74


state 61

    (24) condition -> IF LPAREN expression condition_operator expression . RPAREN LBRACE statements RBRACE
    (16) expression -> expression . PLUS expression

    RPAREN          shift and go to state 75
    PLUS            shift and go to state 42


state 62

    (16) expression -> expression PLUS expression .
    (16) expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    EQUAL           reduce using rule 16 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 16 (expression -> expression PLUS expression .)
    LESS            reduce using rule 16 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 16 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 42

  ! PLUS            [ reduce using rule 16 (expression -> expression PLUS expression .) ]


state 63

    (9) print -> CONSOLE DOT LOG LPAREN arguments RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 76


state 64

    (35) arguments -> argument COMMA . arguments
    (34) arguments -> . argument
    (35) arguments -> . argument COMMA arguments
    (36) argument -> . STRING
    (37) argument -> . VARIABLE
    (38) argument -> . NUMBER

    STRING          shift and go to state 48
    VARIABLE        shift and go to state 49
    NUMBER          shift and go to state 50

    argument                       shift and go to state 47
    arguments                      shift and go to state 77

state 65

    (23) typed_variable_declaration -> VARIABLE VARIABLE error .

    RBRACE          reduce using rule 23 (typed_variable_declaration -> VARIABLE VARIABLE error .)
    VARIABLE        reduce using rule 23 (typed_variable_declaration -> VARIABLE VARIABLE error .)
    VAR             reduce using rule 23 (typed_variable_declaration -> VARIABLE VARIABLE error .)
    LET             reduce using rule 23 (typed_variable_declaration -> VARIABLE VARIABLE error .)
    CONST           reduce using rule 23 (typed_variable_declaration -> VARIABLE VARIABLE error .)


state 66

    (28) typed_variable_declaration -> VAR VARIABLE COLON . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 78


state 67

    (31) typed_variable_declaration -> VAR VARIABLE error .

    RBRACE          reduce using rule 31 (typed_variable_declaration -> VAR VARIABLE error .)
    VARIABLE        reduce using rule 31 (typed_variable_declaration -> VAR VARIABLE error .)
    VAR             reduce using rule 31 (typed_variable_declaration -> VAR VARIABLE error .)
    LET             reduce using rule 31 (typed_variable_declaration -> VAR VARIABLE error .)
    CONST           reduce using rule 31 (typed_variable_declaration -> VAR VARIABLE error .)


state 68

    (29) typed_variable_declaration -> LET VARIABLE COLON . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 79


state 69

    (32) typed_variable_declaration -> LET VARIABLE error .

    RBRACE          reduce using rule 32 (typed_variable_declaration -> LET VARIABLE error .)
    VARIABLE        reduce using rule 32 (typed_variable_declaration -> LET VARIABLE error .)
    VAR             reduce using rule 32 (typed_variable_declaration -> LET VARIABLE error .)
    LET             reduce using rule 32 (typed_variable_declaration -> LET VARIABLE error .)
    CONST           reduce using rule 32 (typed_variable_declaration -> LET VARIABLE error .)


state 70

    (30) typed_variable_declaration -> CONST VARIABLE COLON . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 80


state 71

    (33) typed_variable_declaration -> CONST VARIABLE error .

    RBRACE          reduce using rule 33 (typed_variable_declaration -> CONST VARIABLE error .)
    VARIABLE        reduce using rule 33 (typed_variable_declaration -> CONST VARIABLE error .)
    VAR             reduce using rule 33 (typed_variable_declaration -> CONST VARIABLE error .)
    LET             reduce using rule 33 (typed_variable_declaration -> CONST VARIABLE error .)
    CONST           reduce using rule 33 (typed_variable_declaration -> CONST VARIABLE error .)


state 72

    (10) input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .

    error           reduce using rule 10 (input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    CONSOLE         reduce using rule 10 (input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    CLASS           reduce using rule 10 (input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 10 (input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 10 (input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 10 (input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 10 (input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 10 (input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 10 (input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)


state 73

    (11) input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 81


state 74

    (12) input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 82


state 75

    (24) condition -> IF LPAREN expression condition_operator expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 83


state 76

    (9) print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .

    error           reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    CONSOLE         reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    CLASS           reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    LET             reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    VAR             reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    IF              reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    $end            reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)
    RBRACE          reduce using rule 9 (print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON .)


state 77

    (35) arguments -> argument COMMA arguments .

    RPAREN          reduce using rule 35 (arguments -> argument COMMA arguments .)


state 78

    (28) typed_variable_declaration -> VAR VARIABLE COLON VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 84


state 79

    (29) typed_variable_declaration -> LET VARIABLE COLON VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 85


state 80

    (30) typed_variable_declaration -> CONST VARIABLE COLON VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 86


state 81

    (11) input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .

    error           reduce using rule 11 (input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    CONSOLE         reduce using rule 11 (input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    CLASS           reduce using rule 11 (input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 11 (input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 11 (input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 11 (input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 11 (input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 11 (input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 11 (input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)


state 82

    (12) input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .

    error           reduce using rule 12 (input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    CONSOLE         reduce using rule 12 (input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    CLASS           reduce using rule 12 (input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 12 (input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    LET             reduce using rule 12 (input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 12 (input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 12 (input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 12 (input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 12 (input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON .)


state 83

    (24) condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . print
    (5) statement -> . structure_declaration
    (6) statement -> . input
    (7) statement -> . error
    (8) statement -> . condition
    (9) print -> . CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON
    (39) structure_declaration -> . CLASS VARIABLE LBRACE typed_variable_declarations RBRACE
    (10) input -> . VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (11) input -> . LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (12) input -> . VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (24) condition -> . IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE

    error           shift and go to state 7
    CONSOLE         shift and go to state 9
    CLASS           shift and go to state 10
    VARIABLE        shift and go to state 11
    LET             shift and go to state 12
    VAR             shift and go to state 13
    IF              shift and go to state 14

    statements                     shift and go to state 87
    statement                      shift and go to state 3
    print                          shift and go to state 4
    structure_declaration          shift and go to state 5
    input                          shift and go to state 6
    condition                      shift and go to state 8

state 84

    (28) typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .

    RBRACE          reduce using rule 28 (typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 28 (typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .)
    VAR             reduce using rule 28 (typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .)
    LET             reduce using rule 28 (typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .)
    CONST           reduce using rule 28 (typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON .)


state 85

    (29) typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .

    RBRACE          reduce using rule 29 (typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 29 (typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .)
    VAR             reduce using rule 29 (typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .)
    LET             reduce using rule 29 (typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .)
    CONST           reduce using rule 29 (typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON .)


state 86

    (30) typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .

    RBRACE          reduce using rule 30 (typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 30 (typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .)
    VAR             reduce using rule 30 (typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .)
    LET             reduce using rule 30 (typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .)
    CONST           reduce using rule 30 (typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON .)


state 87

    (24) condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements . RBRACE
    (3) statements -> statements . statement
    (4) statement -> . print
    (5) statement -> . structure_declaration
    (6) statement -> . input
    (7) statement -> . error
    (8) statement -> . condition
    (9) print -> . CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON
    (39) structure_declaration -> . CLASS VARIABLE LBRACE typed_variable_declarations RBRACE
    (10) input -> . VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (11) input -> . LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (12) input -> . VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON
    (24) condition -> . IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE

    RBRACE          shift and go to state 88
    error           shift and go to state 7
    CONSOLE         shift and go to state 9
    CLASS           shift and go to state 10
    VARIABLE        shift and go to state 11
    LET             shift and go to state 12
    VAR             shift and go to state 13
    IF              shift and go to state 14

    statement                      shift and go to state 15
    print                          shift and go to state 4
    structure_declaration          shift and go to state 5
    input                          shift and go to state 6
    condition                      shift and go to state 8

state 88

    (24) condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .

    error           reduce using rule 24 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    CONSOLE         reduce using rule 24 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 24 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 24 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    LET             reduce using rule 24 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 24 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 24 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 24 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 24 (condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
