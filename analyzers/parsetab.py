
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ASSIGN BREAK CASE CATCH CLASS COLON COMMA CONSOLE CONST CONSTRUCTOR CONTINUE DEFAULT DELETE DIVIDE DIVIDE_ASSIGN DO DOT ELSE EQUAL EXPORT EXTENDS FINALLY FOR FROM FUNCTION GREATER GREATER_EQUAL IF IMPLEMENTS IMPORT IN INSTANCEOF LBRACE LBRACKET LESS LESS_EQUAL LET LOG LPAREN MINUS MINUS_ASSIGN MODULO MODULO_ASSIGN MULTIPLY MULTIPLY_ASSIGN NEW NOT NOT_EQUAL NUMBER OR PLUS PLUS_ASSIGN PRINT PROMPT QUESTION_MARK RBRACE RBRACKET RETURN RPAREN SEMICOLON STRICT_EQUAL STRING SUPER SWITCH THIS THROW TRY TYPEOF VAR VARIABLE VOID WHILEprogram : statementsstatements : statement\n| statements statementstatement : print\n| structure_declaration\n| input \n| condition\n| arithmetic_assignment\n| object_creation\n| constructor_declaration\n| method_call\n| errorprint : CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLONinput : VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON\n| LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON\n| VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON\n| CONST VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLONexpression : expression PLUS term\n| expression MINUS term\n| termterm : term MULTIPLY factor\n| term DIVIDE factor\n| factorfactor : NUMBER\n| VARIABLEexpression : expression GREATER expression\n| expression LESS expression\n| expression GREATER_EQUAL expression\n| expression LESS_EQUAL expression\n| expression EQUAL expression\n| expression NOT_EQUAL expressionarithmetic_assignment : LET VARIABLE ASSIGN expression SEMICOLON\n| VAR VARIABLE ASSIGN expression SEMICOLON\n| CONST LET VARIABLE ASSIGN expression SEMICOLONtyped_variable_declaration : VARIABLE error\n| VARIABLE VARIABLE errorobject_creation : VARIABLE ASSIGN NEW VARIABLE LPAREN arguments RPAREN SEMICOLONmethod_call : VARIABLE DOT VARIABLE LPAREN arguments RPAREN SEMICOLONconstructor_declaration : CONSTRUCTOR LPAREN parameters RPAREN LBRACE constructor_body RBRACEparameters : parameter\n| parameters COMMA parameterparameter : VARIABLE COLON VARIABLEconstructor_body : constructor_statement\n| constructor_body constructor_statementconstructor_statement : THIS DOT VARIABLE ASSIGN VARIABLE SEMICOLONcondition : IF LPAREN expression RPAREN LBRACE statements RBRACE\n| IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACEcondition_operator : EQUAL\n| GREATER\n| LESS\n| GREATER_EQUAL\n| LESS_EQUAL\n| NOT_EQUALtyped_variable_declaration : VAR VARIABLE COLON VARIABLE SEMICOLON\n| LET VARIABLE COLON VARIABLE SEMICOLON\n| CONST VARIABLE COLON VARIABLE SEMICOLON\n| VAR VARIABLE error\n| LET VARIABLE error\n| CONST VARIABLE errorarguments : argument\n| argument COMMA argumentsargument : STRING\n| VARIABLE\n| NUMBERstructure_declaration : CLASS VARIABLE LBRACE typed_variable_declarations RBRACEtyped_variable_declarations : typed_variable_declaration\n| typed_variable_declarations typed_variable_declaration'
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,9,10,11,12,21,50,84,86,88,89,90,95,97,100,123,129,130,134,140,141,142,143,144,145,151,154,156,158,],[12,12,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-3,85,116,-65,118,120,122,-32,-33,12,-14,-34,12,-13,-38,-15,-16,-17,-46,-39,-37,12,12,-47,]),'CONSOLE':([0,2,3,4,5,6,7,8,9,10,11,12,21,86,95,97,100,123,129,130,134,140,141,142,143,144,145,151,154,156,158,],[13,13,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-3,-65,-32,-33,13,-14,-34,13,-13,-38,-15,-16,-17,-46,-39,-37,13,13,-47,]),'CLASS':([0,2,3,4,5,6,7,8,9,10,11,12,21,86,95,97,100,123,129,130,134,140,141,142,143,144,145,151,154,156,158,],[14,14,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-3,-65,-32,-33,14,-14,-34,14,-13,-38,-15,-16,-17,-46,-39,-37,14,14,-47,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,17,18,21,25,29,30,31,33,35,37,38,49,50,51,52,53,54,55,58,64,66,67,68,69,70,71,72,73,74,75,77,78,85,86,87,92,95,97,100,115,116,117,118,119,120,121,122,123,129,130,134,140,141,142,143,144,145,147,148,149,150,151,154,155,156,158,],[15,15,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,23,26,27,28,-3,36,40,45,48,50,57,45,45,82,84,50,-66,88,89,90,82,45,45,45,45,45,45,45,45,45,45,45,48,113,-35,-65,-67,82,-32,-33,15,82,-36,136,-57,137,-58,138,-59,-14,-34,15,-13,-38,-15,-16,-17,-46,-39,153,-54,-55,-56,-37,15,157,15,-47,]),'LET':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,33,51,52,85,86,87,95,97,100,116,118,120,122,123,129,130,134,140,141,142,143,144,145,148,149,150,151,154,156,158,],[16,16,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,29,-3,54,54,-66,-35,-65,-67,-32,-33,16,-36,-57,-58,-59,-14,-34,16,-13,-38,-15,-16,-17,-46,-39,-54,-55,-56,-37,16,16,-47,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,21,33,51,52,85,86,87,95,97,100,116,118,120,122,123,129,130,134,140,141,142,143,144,145,148,149,150,151,154,156,158,],[17,17,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-3,53,53,-66,-35,-65,-67,-32,-33,17,-36,-57,-58,-59,-14,-34,17,-13,-38,-15,-16,-17,-46,-39,-54,-55,-56,-37,17,17,-47,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,21,33,51,52,85,86,87,95,97,100,116,118,120,122,123,129,130,134,140,141,142,143,144,145,148,149,150,151,154,156,158,],[18,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-3,55,55,-66,-35,-65,-67,-32,-33,18,-36,-57,-58,-59,-14,-34,18,-13,-38,-15,-16,-17,-46,-39,-54,-55,-56,-37,18,18,-47,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,21,86,95,97,100,123,129,130,134,140,141,142,143,144,145,151,154,156,158,],[19,19,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-3,-65,-32,-33,19,-14,-34,19,-13,-38,-15,-16,-17,-46,-39,-37,19,19,-47,]),'CONSTRUCTOR':([0,2,3,4,5,6,7,8,9,10,11,12,21,86,95,97,100,123,129,130,134,140,141,142,143,144,145,151,154,156,158,],[20,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-3,-65,-32,-33,20,-14,-34,20,-13,-38,-15,-16,-17,-46,-39,-37,20,20,-47,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,21,86,95,97,123,129,134,140,141,142,143,144,145,151,158,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-3,-65,-32,-33,-14,-34,-13,-38,-15,-16,-17,-46,-39,-37,-47,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,21,51,52,85,86,87,95,97,116,118,120,122,123,129,130,131,132,134,140,141,142,143,144,145,146,148,149,150,151,156,158,159,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-3,86,-66,-35,-65,-67,-32,-33,-36,-57,-58,-59,-14,-34,144,145,-43,-13,-38,-15,-16,-17,-46,-39,-44,-54,-55,-56,-37,158,-47,-45,]),'DOT':([13,15,133,],[22,25,147,]),'ASSIGN':([15,26,27,28,40,153,],[24,37,38,39,64,155,]),'LPAREN':([19,20,32,34,36,57,59,61,63,],[30,31,49,56,58,92,94,96,98,]),'LOG':([22,],[32,]),'LBRACE':([23,65,76,152,],[33,100,111,154,]),'PROMPT':([24,37,38,39,],[34,59,61,63,]),'NEW':([24,],[35,]),'NUMBER':([30,37,38,49,58,64,66,67,68,69,70,71,72,73,74,75,92,115,],[44,44,44,83,83,44,44,44,44,44,44,44,44,44,44,44,83,83,]),'RPAREN':([41,42,43,44,45,46,47,56,79,80,81,82,83,93,94,96,98,101,102,103,104,105,106,107,108,109,110,112,113,124,135,],[65,-20,-23,-24,-25,76,-40,91,114,-60,-62,-63,-64,125,126,127,128,-18,-19,-26,-27,-28,-29,-30,-31,-21,-22,-41,-42,139,-61,]),'PLUS':([41,42,43,44,45,60,62,99,101,102,103,104,105,106,107,108,109,110,],[66,-20,-23,-24,-25,66,66,66,-18,-19,66,66,66,66,66,66,-21,-22,]),'MINUS':([41,42,43,44,45,60,62,99,101,102,103,104,105,106,107,108,109,110,],[67,-20,-23,-24,-25,67,67,67,-18,-19,67,67,67,67,67,67,-21,-22,]),'GREATER':([41,42,43,44,45,60,62,99,101,102,103,104,105,106,107,108,109,110,],[68,-20,-23,-24,-25,68,68,68,-18,-19,68,68,68,68,68,68,-21,-22,]),'LESS':([41,42,43,44,45,60,62,99,101,102,103,104,105,106,107,108,109,110,],[69,-20,-23,-24,-25,69,69,69,-18,-19,69,69,69,69,69,69,-21,-22,]),'GREATER_EQUAL':([41,42,43,44,45,60,62,99,101,102,103,104,105,106,107,108,109,110,],[70,-20,-23,-24,-25,70,70,70,-18,-19,70,70,70,70,70,70,-21,-22,]),'LESS_EQUAL':([41,42,43,44,45,60,62,99,101,102,103,104,105,106,107,108,109,110,],[71,-20,-23,-24,-25,71,71,71,-18,-19,71,71,71,71,71,71,-21,-22,]),'EQUAL':([41,42,43,44,45,60,62,99,101,102,103,104,105,106,107,108,109,110,],[72,-20,-23,-24,-25,72,72,72,-18,-19,72,72,72,72,72,72,-21,-22,]),'NOT_EQUAL':([41,42,43,44,45,60,62,99,101,102,103,104,105,106,107,108,109,110,],[73,-20,-23,-24,-25,73,73,73,-18,-19,73,73,73,73,73,73,-21,-22,]),'SEMICOLON':([42,43,44,45,60,62,91,99,101,102,103,104,105,106,107,108,109,110,114,125,126,127,128,136,137,138,139,157,],[-20,-23,-24,-25,95,97,123,129,-18,-19,-26,-27,-28,-29,-30,-31,-21,-22,134,140,141,142,143,148,149,150,151,159,]),'MULTIPLY':([42,43,44,45,101,102,109,110,],[74,-23,-24,-25,74,74,-21,-22,]),'DIVIDE':([42,43,44,45,101,102,109,110,],[75,-23,-24,-25,75,75,-21,-22,]),'COMMA':([46,47,80,81,82,83,112,113,],[77,-40,115,-62,-63,-64,-41,-42,]),'COLON':([48,88,89,90,],[78,117,119,121,]),'STRING':([49,58,92,115,],[81,81,81,81,]),'THIS':([111,131,132,146,159,],[133,133,-43,-44,-45,]),'ELSE':([144,],[152,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,100,154,],[2,130,156,]),'statement':([0,2,100,130,154,156,],[3,21,3,21,3,21,]),'print':([0,2,100,130,154,156,],[4,4,4,4,4,4,]),'structure_declaration':([0,2,100,130,154,156,],[5,5,5,5,5,5,]),'input':([0,2,100,130,154,156,],[6,6,6,6,6,6,]),'condition':([0,2,100,130,154,156,],[7,7,7,7,7,7,]),'arithmetic_assignment':([0,2,100,130,154,156,],[8,8,8,8,8,8,]),'object_creation':([0,2,100,130,154,156,],[9,9,9,9,9,9,]),'constructor_declaration':([0,2,100,130,154,156,],[10,10,10,10,10,10,]),'method_call':([0,2,100,130,154,156,],[11,11,11,11,11,11,]),'expression':([30,37,38,64,68,69,70,71,72,73,],[41,60,62,99,103,104,105,106,107,108,]),'term':([30,37,38,64,66,67,68,69,70,71,72,73,],[42,42,42,42,101,102,42,42,42,42,42,42,]),'factor':([30,37,38,64,66,67,68,69,70,71,72,73,74,75,],[43,43,43,43,43,43,43,43,43,43,43,43,109,110,]),'parameters':([31,],[46,]),'parameter':([31,77,],[47,112,]),'typed_variable_declarations':([33,],[51,]),'typed_variable_declaration':([33,51,],[52,87,]),'arguments':([49,58,92,115,],[79,93,124,135,]),'argument':([49,58,92,115,],[80,80,80,80,]),'constructor_body':([111,],[131,]),'constructor_statement':([111,131,],[132,146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','syntax_analyzer.py',10),
  ('statements -> statement','statements',1,'p_statements','syntax_analyzer.py',13),
  ('statements -> statements statement','statements',2,'p_statements','syntax_analyzer.py',14),
  ('statement -> print','statement',1,'p_statement','syntax_analyzer.py',18),
  ('statement -> structure_declaration','statement',1,'p_statement','syntax_analyzer.py',19),
  ('statement -> input','statement',1,'p_statement','syntax_analyzer.py',20),
  ('statement -> condition','statement',1,'p_statement','syntax_analyzer.py',21),
  ('statement -> arithmetic_assignment','statement',1,'p_statement','syntax_analyzer.py',22),
  ('statement -> object_creation','statement',1,'p_statement','syntax_analyzer.py',23),
  ('statement -> constructor_declaration','statement',1,'p_statement','syntax_analyzer.py',24),
  ('statement -> method_call','statement',1,'p_statement','syntax_analyzer.py',25),
  ('statement -> error','statement',1,'p_statement','syntax_analyzer.py',26),
  ('print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON','print',7,'p_print','syntax_analyzer.py',33),
  ('input -> VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON','input',6,'p_input','syntax_analyzer.py',37),
  ('input -> LET VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON','input',7,'p_input','syntax_analyzer.py',38),
  ('input -> VAR VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON','input',7,'p_input','syntax_analyzer.py',39),
  ('input -> CONST VARIABLE ASSIGN PROMPT LPAREN RPAREN SEMICOLON','input',7,'p_input','syntax_analyzer.py',40),
  ('expression -> expression PLUS term','expression',3,'p_expression','syntax_analyzer.py',45),
  ('expression -> expression MINUS term','expression',3,'p_expression','syntax_analyzer.py',46),
  ('expression -> term','expression',1,'p_expression','syntax_analyzer.py',47),
  ('term -> term MULTIPLY factor','term',3,'p_term','syntax_analyzer.py',51),
  ('term -> term DIVIDE factor','term',3,'p_term','syntax_analyzer.py',52),
  ('term -> factor','term',1,'p_term','syntax_analyzer.py',53),
  ('factor -> NUMBER','factor',1,'p_factor','syntax_analyzer.py',57),
  ('factor -> VARIABLE','factor',1,'p_factor','syntax_analyzer.py',58),
  ('expression -> expression GREATER expression','expression',3,'p_expression_comparison','syntax_analyzer.py',62),
  ('expression -> expression LESS expression','expression',3,'p_expression_comparison','syntax_analyzer.py',63),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression_comparison','syntax_analyzer.py',64),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression_comparison','syntax_analyzer.py',65),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_comparison','syntax_analyzer.py',66),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression_comparison','syntax_analyzer.py',67),
  ('arithmetic_assignment -> LET VARIABLE ASSIGN expression SEMICOLON','arithmetic_assignment',5,'p_arithmetic_assignment','syntax_analyzer.py',71),
  ('arithmetic_assignment -> VAR VARIABLE ASSIGN expression SEMICOLON','arithmetic_assignment',5,'p_arithmetic_assignment','syntax_analyzer.py',72),
  ('arithmetic_assignment -> CONST LET VARIABLE ASSIGN expression SEMICOLON','arithmetic_assignment',6,'p_arithmetic_assignment','syntax_analyzer.py',73),
  ('typed_variable_declaration -> VARIABLE error','typed_variable_declaration',2,'p_invalid_declaration','syntax_analyzer.py',78),
  ('typed_variable_declaration -> VARIABLE VARIABLE error','typed_variable_declaration',3,'p_invalid_declaration','syntax_analyzer.py',79),
  ('object_creation -> VARIABLE ASSIGN NEW VARIABLE LPAREN arguments RPAREN SEMICOLON','object_creation',8,'p_object_creation','syntax_analyzer.py',83),
  ('method_call -> VARIABLE DOT VARIABLE LPAREN arguments RPAREN SEMICOLON','method_call',7,'p_method_call','syntax_analyzer.py',87),
  ('constructor_declaration -> CONSTRUCTOR LPAREN parameters RPAREN LBRACE constructor_body RBRACE','constructor_declaration',7,'p_constructor_declaration','syntax_analyzer.py',91),
  ('parameters -> parameter','parameters',1,'p_parameters','syntax_analyzer.py',95),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','syntax_analyzer.py',96),
  ('parameter -> VARIABLE COLON VARIABLE','parameter',3,'p_parameter','syntax_analyzer.py',103),
  ('constructor_body -> constructor_statement','constructor_body',1,'p_constructor_body','syntax_analyzer.py',107),
  ('constructor_body -> constructor_body constructor_statement','constructor_body',2,'p_constructor_body','syntax_analyzer.py',108),
  ('constructor_statement -> THIS DOT VARIABLE ASSIGN VARIABLE SEMICOLON','constructor_statement',6,'p_constructor_statement','syntax_analyzer.py',115),
  ('condition -> IF LPAREN expression RPAREN LBRACE statements RBRACE','condition',7,'p_condition','syntax_analyzer.py',123),
  ('condition -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','condition',11,'p_condition','syntax_analyzer.py',124),
  ('condition_operator -> EQUAL','condition_operator',1,'p_condition_operator','syntax_analyzer.py',131),
  ('condition_operator -> GREATER','condition_operator',1,'p_condition_operator','syntax_analyzer.py',132),
  ('condition_operator -> LESS','condition_operator',1,'p_condition_operator','syntax_analyzer.py',133),
  ('condition_operator -> GREATER_EQUAL','condition_operator',1,'p_condition_operator','syntax_analyzer.py',134),
  ('condition_operator -> LESS_EQUAL','condition_operator',1,'p_condition_operator','syntax_analyzer.py',135),
  ('condition_operator -> NOT_EQUAL','condition_operator',1,'p_condition_operator','syntax_analyzer.py',136),
  ('typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON','typed_variable_declaration',5,'p_typed_variable_declaration','syntax_analyzer.py',140),
  ('typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON','typed_variable_declaration',5,'p_typed_variable_declaration','syntax_analyzer.py',141),
  ('typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON','typed_variable_declaration',5,'p_typed_variable_declaration','syntax_analyzer.py',142),
  ('typed_variable_declaration -> VAR VARIABLE error','typed_variable_declaration',3,'p_typed_variable_declaration','syntax_analyzer.py',143),
  ('typed_variable_declaration -> LET VARIABLE error','typed_variable_declaration',3,'p_typed_variable_declaration','syntax_analyzer.py',144),
  ('typed_variable_declaration -> CONST VARIABLE error','typed_variable_declaration',3,'p_typed_variable_declaration','syntax_analyzer.py',145),
  ('arguments -> argument','arguments',1,'p_arguments','syntax_analyzer.py',158),
  ('arguments -> argument COMMA arguments','arguments',3,'p_arguments','syntax_analyzer.py',159),
  ('argument -> STRING','argument',1,'p_argument','syntax_analyzer.py',167),
  ('argument -> VARIABLE','argument',1,'p_argument','syntax_analyzer.py',168),
  ('argument -> NUMBER','argument',1,'p_argument','syntax_analyzer.py',169),
  ('structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE','structure_declaration',5,'p_structure_declaration','syntax_analyzer.py',173),
  ('typed_variable_declarations -> typed_variable_declaration','typed_variable_declarations',1,'p_typed_variable_declarations','syntax_analyzer.py',177),
  ('typed_variable_declarations -> typed_variable_declarations typed_variable_declaration','typed_variable_declarations',2,'p_typed_variable_declarations','syntax_analyzer.py',178),
]
