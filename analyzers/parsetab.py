
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ASSIGN BREAK CASE CATCH CLASS COLON COMMA CONSOLE CONST CONTINUE DEFAULT DELETE DIVIDE DIVIDE_ASSIGN DO DOT ELSE EQUAL EXPORT EXTENDS FINALLY FOR FROM FUNCTION GREATER GREATER_EQUAL IF IMPLEMENTS IMPORT IN INPUT INSTANCEOF LBRACE LBRACKET LESS LESS_EQUAL LET LOG LPAREN MINUS MINUS_ASSIGN MODULO MODULO_ASSIGN MULTIPLY MULTIPLY_ASSIGN NEW NOT NOT_EQUAL NUMBER OR PLUS PLUS_ASSIGN PRINT QUESTION_MARK RBRACE RBRACKET RETURN RPAREN SEMICOLON STRICT_EQUAL STRING SUPER SWITCH THIS THROW TRY TYPEOF VAR VARIABLE VOID WHILEprogram : statementsstatements : statement\n| statements statementstatement : print\n| structure_declaration\n| input \n| error\n| conditionprint : CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLONinput : VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON\n| VARIABLE ASSIGN INPUT LPAREN RPAREN expression : STRING\n| VARIABLE\n| NUMBER\n| expression PLUS expressionterm : term MULTIPLY factor\n| term DIVIDE factor\n| factorfactor : NUMBER\n| VARIABLEtyped_variable_declaration : VARIABLE error\n| VARIABLE VARIABLE errorcondition : IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACEcondition_operator : EQUAL\n| GREATER\n| LESStyped_variable_declaration : VAR VARIABLE COLON VARIABLE SEMICOLON\n| LET VARIABLE COLON VARIABLE SEMICOLON\n| CONST VARIABLE COLON VARIABLE SEMICOLON\n| VAR VARIABLE error\n| LET VARIABLE error\n| CONST VARIABLE errorarguments : argument\n| argument COMMA argumentsargument : STRING\n| VARIABLE\n| NUMBERstructure_declaration : CLASS VARIABLE LBRACE typed_variable_declarations RBRACEtyped_variable_declarations : typed_variable_declaration\n| typed_variable_declarations typed_variable_declaration'
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,13,26,43,45,47,48,49,50,62,64,69,73,74,],[7,7,-2,-4,-5,-6,-7,-8,-3,44,55,-38,57,59,61,-11,-10,-9,7,7,-23,]),'CONSOLE':([0,2,3,4,5,6,7,8,13,45,50,62,64,69,73,74,],[9,9,-2,-4,-5,-6,-7,-8,-3,-38,-11,-10,-9,9,9,-23,]),'CLASS':([0,2,3,4,5,6,7,8,13,45,50,62,64,69,73,74,],[10,10,-2,-4,-5,-6,-7,-8,-3,-38,-11,-10,-9,10,10,-23,]),'VARIABLE':([0,2,3,4,5,6,7,8,10,13,17,19,25,26,27,28,29,30,31,33,34,35,36,37,44,45,46,50,54,55,56,57,58,59,60,61,62,64,69,70,71,72,73,74,],[11,11,-2,-4,-5,-6,-7,-8,15,-3,23,26,41,43,26,-39,47,48,49,23,23,-24,-25,-26,-21,-38,-40,-11,41,-22,66,-30,67,-31,68,-32,-10,-9,11,-27,-28,-29,11,-23,]),'IF':([0,2,3,4,5,6,7,8,13,45,50,62,64,69,73,74,],[12,12,-2,-4,-5,-6,-7,-8,-3,-38,-11,-10,-9,12,12,-23,]),'$end':([1,2,3,4,5,6,7,8,13,45,50,62,64,74,],[0,-1,-2,-4,-5,-6,-7,-8,-3,-38,-11,-10,-9,-23,]),'RBRACE':([3,4,5,6,7,8,13,27,28,44,45,46,50,55,57,59,61,62,64,70,71,72,73,74,],[-2,-4,-5,-6,-7,-8,-3,45,-39,-21,-38,-40,-11,-22,-30,-31,-32,-10,-9,-27,-28,-29,74,-23,]),'DOT':([9,],[14,]),'ASSIGN':([11,],[16,]),'LPAREN':([12,18,20,],[17,25,32,]),'LOG':([14,],[18,]),'LBRACE':([15,63,],[19,69,]),'INPUT':([16,],[20,]),'STRING':([17,25,33,34,35,36,37,54,],[22,40,22,22,-24,-25,-26,40,]),'NUMBER':([17,25,33,34,35,36,37,54,],[24,42,24,24,-24,-25,-26,42,]),'VAR':([19,27,28,44,46,55,57,59,61,70,71,72,],[29,29,-39,-21,-40,-22,-30,-31,-32,-27,-28,-29,]),'LET':([19,27,28,44,46,55,57,59,61,70,71,72,],[30,30,-39,-21,-40,-22,-30,-31,-32,-27,-28,-29,]),'CONST':([19,27,28,44,46,55,57,59,61,70,71,72,],[31,31,-39,-21,-40,-22,-30,-31,-32,-27,-28,-29,]),'PLUS':([21,22,23,24,51,52,],[34,-12,-13,-14,34,34,]),'EQUAL':([21,22,23,24,52,],[35,-12,-13,-14,-15,]),'GREATER':([21,22,23,24,52,],[36,-12,-13,-14,-15,]),'LESS':([21,22,23,24,52,],[37,-12,-13,-14,-15,]),'RPAREN':([22,23,24,32,38,39,40,41,42,51,52,65,],[-12,-13,-14,50,53,-33,-35,-36,-37,63,-15,-34,]),'COMMA':([39,40,41,42,],[54,-35,-36,-37,]),'COLON':([47,48,49,],[56,58,60,]),'SEMICOLON':([50,53,66,67,68,],[62,64,70,71,72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,69,],[2,73,]),'statement':([0,2,69,73,],[3,13,3,13,]),'print':([0,2,69,73,],[4,4,4,4,]),'structure_declaration':([0,2,69,73,],[5,5,5,5,]),'input':([0,2,69,73,],[6,6,6,6,]),'condition':([0,2,69,73,],[8,8,8,8,]),'expression':([17,33,34,],[21,51,52,]),'typed_variable_declarations':([19,],[27,]),'typed_variable_declaration':([19,27,],[28,46,]),'condition_operator':([21,],[33,]),'arguments':([25,54,],[38,65,]),'argument':([25,54,],[39,39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','syntax_analyzer.py',10),
  ('statements -> statement','statements',1,'p_statements','syntax_analyzer.py',13),
  ('statements -> statements statement','statements',2,'p_statements','syntax_analyzer.py',14),
  ('statement -> print','statement',1,'p_statement','syntax_analyzer.py',18),
  ('statement -> structure_declaration','statement',1,'p_statement','syntax_analyzer.py',19),
  ('statement -> input','statement',1,'p_statement','syntax_analyzer.py',20),
  ('statement -> error','statement',1,'p_statement','syntax_analyzer.py',21),
  ('statement -> condition','statement',1,'p_statement','syntax_analyzer.py',22),
  ('print -> CONSOLE DOT LOG LPAREN arguments RPAREN SEMICOLON','print',7,'p_print','syntax_analyzer.py',29),
  ('input -> VARIABLE ASSIGN INPUT LPAREN RPAREN SEMICOLON','input',6,'p_input','syntax_analyzer.py',34),
  ('input -> VARIABLE ASSIGN INPUT LPAREN RPAREN','input',5,'p_input','syntax_analyzer.py',35),
  ('expression -> STRING','expression',1,'p_expression','syntax_analyzer.py',40),
  ('expression -> VARIABLE','expression',1,'p_expression','syntax_analyzer.py',41),
  ('expression -> NUMBER','expression',1,'p_expression','syntax_analyzer.py',42),
  ('expression -> expression PLUS expression','expression',3,'p_expression','syntax_analyzer.py',43),
  ('term -> term MULTIPLY factor','term',3,'p_term','syntax_analyzer.py',50),
  ('term -> term DIVIDE factor','term',3,'p_term','syntax_analyzer.py',51),
  ('term -> factor','term',1,'p_term','syntax_analyzer.py',52),
  ('factor -> NUMBER','factor',1,'p_factor','syntax_analyzer.py',56),
  ('factor -> VARIABLE','factor',1,'p_factor','syntax_analyzer.py',57),
  ('typed_variable_declaration -> VARIABLE error','typed_variable_declaration',2,'p_invalid_declaration','syntax_analyzer.py',61),
  ('typed_variable_declaration -> VARIABLE VARIABLE error','typed_variable_declaration',3,'p_invalid_declaration','syntax_analyzer.py',62),
  ('condition -> IF LPAREN expression condition_operator expression RPAREN LBRACE statements RBRACE','condition',9,'p_condition','syntax_analyzer.py',70),
  ('condition_operator -> EQUAL','condition_operator',1,'p_condition_operator','syntax_analyzer.py',74),
  ('condition_operator -> GREATER','condition_operator',1,'p_condition_operator','syntax_analyzer.py',75),
  ('condition_operator -> LESS','condition_operator',1,'p_condition_operator','syntax_analyzer.py',76),
  ('typed_variable_declaration -> VAR VARIABLE COLON VARIABLE SEMICOLON','typed_variable_declaration',5,'p_typed_variable_declaration','syntax_analyzer.py',80),
  ('typed_variable_declaration -> LET VARIABLE COLON VARIABLE SEMICOLON','typed_variable_declaration',5,'p_typed_variable_declaration','syntax_analyzer.py',81),
  ('typed_variable_declaration -> CONST VARIABLE COLON VARIABLE SEMICOLON','typed_variable_declaration',5,'p_typed_variable_declaration','syntax_analyzer.py',82),
  ('typed_variable_declaration -> VAR VARIABLE error','typed_variable_declaration',3,'p_typed_variable_declaration','syntax_analyzer.py',83),
  ('typed_variable_declaration -> LET VARIABLE error','typed_variable_declaration',3,'p_typed_variable_declaration','syntax_analyzer.py',84),
  ('typed_variable_declaration -> CONST VARIABLE error','typed_variable_declaration',3,'p_typed_variable_declaration','syntax_analyzer.py',85),
  ('arguments -> argument','arguments',1,'p_arguments','syntax_analyzer.py',98),
  ('arguments -> argument COMMA arguments','arguments',3,'p_arguments','syntax_analyzer.py',99),
  ('argument -> STRING','argument',1,'p_argument','syntax_analyzer.py',107),
  ('argument -> VARIABLE','argument',1,'p_argument','syntax_analyzer.py',108),
  ('argument -> NUMBER','argument',1,'p_argument','syntax_analyzer.py',109),
  ('structure_declaration -> CLASS VARIABLE LBRACE typed_variable_declarations RBRACE','structure_declaration',5,'p_structure_declaration','syntax_analyzer.py',113),
  ('typed_variable_declarations -> typed_variable_declaration','typed_variable_declarations',1,'p_typed_variable_declarations','syntax_analyzer.py',117),
  ('typed_variable_declarations -> typed_variable_declarations typed_variable_declaration','typed_variable_declarations',2,'p_typed_variable_declarations','syntax_analyzer.py',118),
]
